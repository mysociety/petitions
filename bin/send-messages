#!/usr/bin/php -q
<?php
/* 
 * send-messages
 * Run from cron regularly to send out Government responses to petitions
 * so forth, and take appropriate action.
 *
 */

$short_opts = '';
$long_opts = array('verbose','help');

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once '../conf/general';
require_once "../phplib/petcli.php";
require_once '../phplib/petition.php';
require_once '../phplib/token.php';
require_once "../phplib/fns.php";

function verbose($str) {
    global $verbose;
    if ($verbose) 
        fwrite(STDERR, "send-messages: $str\n");
}
function error($str) {
    fwrite(STDERR, "send-messages: ERROR: $str\n");
}

$switches = $options[0];
$args = $options[1];
$verbose = 0; 
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--help') {
?>

Petitions message sending script. This is responsible for sending
out government responses to petitions and so forth. It should be run
periodically from cron.

Usage: send-messages [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

db_connect();
send_pending_messages();

# ---

/* send_pending_messages
 * Dispatch messages to petition signers and creators which have not yet been
 * sent. */
function send_pending_messages() {
    /* Messages to the administrators. */
    verbose("sending pending admin messages");
    
    $q = db_query("
                select * from message
                where sendtoadmin
                    and (select message_id
                        from message_admin_recipient
                        where message_id = id) is null
                order by random()");

    while ($msg = db_fetch_array($q)) {
        db_query("lock table message_admin_recipient in exclusive mode");
        $f = db_getOne('
                    select message_id
                    from message_admin_recipient
                    where message_id = ?
                    for update', $msg['id']);
        
        if (!is_null($f)) {
            verbose("message #${msg['id']} sent while waiting for lock; skipping");
            continue;
        }

        $petition = new Petition(intval($msg['petition_id']));
        $data = $petition->data;
        $data['url'] = OPTION_ADMIN_URL . '?page=pet&petition=' . $data['ref'];
        $data['petition_url'] = $petition->url_main();
        $data['comments_blurb'] = '';
        if ($data['comments'])
                $data['comments_blurb'] = "The creator added the following comments for you:\n" . $data['comments'] . "\n\n-----\n\n";

        # Any variables passed in when message was created
        $vars = unserialize($msg['emailtemplatevars']);
        if ($vars) $data = array_merge($data, $vars);

        verbose("message #${msg['id']} is for petition #" . $petition->id() . " (" . $petition->ref() . "); circumstance '${msg['circumstance']}'");
        
        $f = false;
        $to = $petition->admin_email();
        $from = array('email' => $to, 'name' => $petition->from_name());
        if (isset($msg['emailtemplatename'])) {
            verbose("sending message #${msg['id']} using email template '${msg['emailtemplatename']}'");
            $f = pet_send_email_template($to, $msg['emailtemplatename'], $data, $from);
        } else {
            verbose("sending message #${msg['id']} as raw email, subject '${msg['emailsubject']}'");
            $f = pet_send_email($to, $msg['emailsubject'], $msg['emailbody'], $from);
        }

        if ($f)
            db_query('
                    insert into message_admin_recipient (message_id)
                    values (?)', $msg['id']);
        else
            error("failed to send message #${msg['id']} to admins");

        db_commit();
    }

    /* Messages to creators. */
    verbose("sending pending creator messages");
    
    $q = db_query("
                select * from message
                where sendtocreator
                    and (select message_id
                        from message_creator_recipient
                        where message_id = id
                            and message_creator_recipient.petition_id
                                = message.petition_id) is null
                order by random()");

    while ($msg = db_fetch_array($q)) {
        /* Grab lock. As ever, this is bloody ugly, because we have to do
         * something (send an email) which isn't transactional in the
         * database, so we must do only one thing per transaction and commit
         * once that transaction has succeeded. */
        db_query("lock table message_creator_recipient in exclusive mode");
        $f = db_getOne('
                    select message_id
                    from message_creator_recipient
                    where message_id = ?
                    for update', $msg['id']);

        if (!is_null($f)) {
            verbose("message #${msg['id']} sent while waiting for lock; skipping");
            continue;
        }

        $petition = new Petition(intval($msg['petition_id']));
        $data = $petition->data;
        verbose("message #${msg['id']} is for petition #" . $petition->id() . " (" . $petition->ref() . "); circumstance '${msg['circumstance']}'");

        /* XXX we also need a URL containing a token which is sent on
         * success to the signer. For now just generate this here, but
         * later on we'll need to move it into message, so that we can send
         * reminders. */
        /* XXX Not using creator messages yet */
        if ($msg['circumstance'] == 'announce-post') {
            $announce_url = $petition->url_announce();
            $params = array();
            $data['url'] = pb_person_make_signon_url(null, $petition->creator_email(), 
                "GET", $petition->url_announce(), $params);
        } elseif ($msg['circumstance'] == 'rejected-once') {
            $data['url'] = $petition->url_main(true) . token_make('e', $petition->id());
        } elseif ($msg['circumstance'] == 'approved') {
            $data['url'] = $petition->url_main();
        } elseif ($msg['circumstance'] == 'rejected-timeout') {
            $data['url'] = $petition->url_main();
            $data['rejected_url'] = $petition->domain() . '/list/rejected';
        }
        if ($msg['circumstance'] == 'rejected-once' || $msg['circumstance'] == 'rejected-again'
            || $msg['circumstance'] == 'rejected-timeout') {
            if ($data['rejection_reason'])
                $data['rejection_reason'] = "\nFurther information: " . $data['rejection_reason'];
        }

        # Any variables passed in when message was created
        $vars = unserialize($msg['emailtemplatevars']);
        if ($vars) $data = array_merge($data, $vars);

        // Make any extra headers
        $from = array('email' => $petition->admin_email(), 'name' => $petition->from_name());

        // Send with template or raw appropriately
        $f = false;
        if (!$petition->creator_email()) {
            # An offline petition might not have a creator's email address.
            $f = true;
        } elseif (isset($msg['emailtemplatename'])) {
            verbose("sending message #${msg['id']} using email template '${msg['emailtemplatename']}'");
            $f = pet_send_email_template($petition->creator_email(), $msg['emailtemplatename'], $data, $from);
        } else {
            // We assume that this is now a government response
            $plain = pet_create_response_email('plain', $petition->url_main(), $msg['emailsubject'], $msg['emailbody']);
            if ($msg['fromaddress'] == 'admin-html') {
                $html = pet_create_response_email('html', $petition->url_main(), $msg['emailsubject'], $msg['emailbody']);
                $body = array('plain' => $plain, 'html' => $html);
            } else {
                $body = $plain;
            }

            # All other HTML email cases are shifted by the response-send script which goes direct to exim.
            verbose("sending message #${msg['id']} as raw, subject '${msg['emailsubject']}'");
            $f = pet_send_email($petition->creator_email(), $msg['emailsubject'], $body, $from);
        }

        // Store success
        if ($f)
            db_query('
                    insert into message_creator_recipient
                        (message_id, petition_id)
                    values (?, ?)', array($msg['id'], $petition->id()));
        else
            error("failed to send message #${msg['id']} to creator of petition #" . $petition->id() . " (" . $petition->ref() . ")");

        db_commit();
    }
}

