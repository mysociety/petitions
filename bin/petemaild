#!/usr/bin/perl -w
#
# petemaild:
# High-performance email sending tool, for sending confirmation and other mails
# from the petitions site.

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}

use strict;
use Carp qw(verbose);

my $foad = 0;

use IO::Socket;
use Socket;
use Data::Dumper;

#
# Managing Debug mode
#
package Debug;

my $enabled = 0;
sub enabled (;$) {
    $enabled = $_[0] if defined $_[0];
    return $enabled;
}

package Log;

use mySociety::SystemMisc qw(open_log print_log);

my $verboselevel = 0;

# verbose LEVEL
# Set the verboselevel to LEVEL.
sub verbose ($) {
    $verboselevel = shift;
}

my $stderronly = 0;

# stderronly FLAG
# If FLAG is true, set future logging to go to standard error only; if false,
# to syslog as well.
sub stderronly (;$) {
    $stderronly = $_[0] if defined $_[0];
    return $stderronly;
}

sub do_output ($$) {
    my ($prio, $str) = @_;
    if ($stderronly) {
        STDERR->print("petemaild: $prio: ", $str, "\n");
    } else {
        our $have_opened_log;
        if (!defined($have_opened_log) || $$ != $have_opened_log) {
            open_log('petemaild');
            $have_opened_log = $$;
        }
        print_log($prio eq 'noise' ? 'debug' : $prio, $str);
    }
}

# signal handler to permit changing of verbose level on-the-fly.
my $changeverboselevel = 0;
$SIG{USR1} = sub { ++$changeverboselevel; };

# print LEVEL ARG [...]
# Print the ARGS to the log at the given LEVEL.
sub print ($@) {
    my $prio = shift;

    if ($changeverboselevel) {
        $verboselevel = ($verboselevel + $changeverboselevel) % 3;
        do_output('info', "verbose level now $verboselevel");
        $changeverboselevel = 0;
    }
    
    if ($verboselevel < 2) {
        return if ($prio eq 'noise');
        return if ($verboselevel < 1 && $prio eq 'debug');
        return if ($verboselevel < 0 && $prio eq 'info');
    }
    do_output($prio, join("", @_));
}

# printf LEVEL FORMAT [ARG ...]
# Print the ARGS to the log at the given LEVEL using the printf-style FORMAT
# string.
sub printf ($$;@) {
    my $prio = shift;
    my $fmt = shift;
    Log::print($prio, sprintf($fmt, @_));
}

#
# Object encapsulating a single message on the queue.
# 
package Queue::Message;

use Carp;
use Time::HiRes qw(time);

use fields qw(id state sender recipient domain text events starttime
                createdtime queue priority);

            # message is yet to be sent successfully
use constant STATE_PENDING =>       0;
            # delivery succeeded
use constant STATE_DONE =>          1;
            # delivery permanently failed
use constant STATE_BAD =>           2;

our @statename = qw(STATE_PENDING STATE_DONE STATE_BAD);

use constant EVENT_CREATED =>       0;
use constant EVENT_TEMP_FAILURE =>  1;
use constant EVENT_PERM_FAILURE =>  2;
use constant EVENT_DELIVERED =>     3;

# new ID SENDER RECIPIENT TEXT CREATEDTIME QUEUE
# Construct a new message with the given ID, SENDER, RECIPIENT and TEXT
# (on-the-wire message but with "\n" line-endings). CREATEDTIME should
# give the time at which the message was originally entered in the database.
# QUEUE is the queue object associated with the message.
# XXX Setting QUEUE might not do what you expect, as then the message gets
# immediately requeued by the EVENT_CREATED
sub new ($$$$$$) {
    my Queue::Message $self = shift;
    my ($id, $sender, $recipient) = @_;
    my Queue $queue = $_[5];

    $self = fields::new($self)
        unless (ref($self));

    $self->{id} = $id;
    $self->{state} = STATE_PENDING;
    $self->{sender} = $sender;
    $self->{recipient} = $recipient;
    $self->{text} = $_[3];  # XXX ref?
    $self->{events} = [ ];
    $self->{queue} = $queue;

    $self->{starttime} = time();
    $self->{createdtime} = $_[4];

    my $domain = $recipient;
    $domain =~ s/.*@//;
    $self->{domain} = lc($domain);

    $self->log('info', "from <$sender> to <$recipient> length ", length($_[3]));
        # XXX would be nice to log the Message-ID: here
    $self->addevent(EVENT_CREATED);

    return $self;
}

# log PRIORITY TEXT [...]
# Log information about this message.
sub log ($$@) {
    my Queue::Message $self = shift;
    my $prio = shift;
    unshift(@_, "M$self->{id}: ");
    Log::print($prio, @_);
}

# addevent EVENT [ADDRESS]
# Record the given EVENT on the message.
sub addevent ($$;$) {
    my Queue::Message $self = shift;
    my ($event) = @_;
    my $t = time();
    push(@{$self->{events}}, [$event, $t]);

    if ($event == EVENT_PERM_FAILURE) {
        $self->log('warning', 'delivery failed permanently');
        $self->state(STATE_BAD);
    } elsif ($event == EVENT_DELIVERED) {
        $self->log('info', 'delivery completed');
        $self->state(STATE_DONE);
    }

    $self->{queue}->requeue($self) if ($self->{queue});
}

# state [STATE]
# Get or set the state of this message.
sub state ($;$) {
    my Queue::Message $self = shift;
    if (@_) {
        $self->{state} = $_[0];
        $self->log('noise', "-> $statename[$_[0]]");
    }
    return $self->{state};
}

# Accessors.
foreach (qw(id sender recipient domain text events starttime createdtime)) {
    eval <<EOF;
sub $_ (\$) {
    my Queue::Message \$self = shift;
    return \$self->{$_};
}
EOF
}

#
# The queue object stores information about the emails to send, the servers to
# which they should be sent, and historical information about previous attempts
# to send them.
# 
package Queue;

use Carp;
use Email::Sender::Simple;
use Email::Sender::Transport::SMTP;
use Heap::Priority;
use IO::Select;
use Try::Tiny;

use fields qw(messages finished ss lastcheckedqueue noexpire queue);

# How long a message may stay on the queue before we consider it undeliverable.
use constant MAX_MESSAGE_AGE => 86400;

# new [NOEXPIRE]
# Construct a new queue object. If NOEXPIRE is true, messages older than
# MAX_MESSAGE_AGE will not be expired as usual.
sub new ($;$) {
    my Queue $self = shift;
    my $noexpire = shift;
    $noexpire ||= 0;
    $self = fields::new($self)
        unless (ref($self));

    # hash of opaque ID to message object
    $self->{messages} = { };

    # priority queue of messages
    $self->{queue} = new Heap::Priority();

    # use scheduled retry time as the "priority", so we want to extract the
    # lowest-numbered elements.
    $self->{queue}->lowest_first();

    # list of completed messages
    $self->{finished} = [ ];
    
    $self->{lastcheckedqueue} = time();

    $self->{noexpire} = $noexpire;

    return $self;
}

# add MESSAGE
# Add the MESSAGE to the queue.
sub add ($$) {
    my Queue $self = shift;
    my Queue::Message $msg = shift;
    croak "MESSAGE must be defined" unless (defined($msg));
    croak "MESSAGE must be a Queue::Message object, not " . ref($msg)
        unless (UNIVERSAL::isa($msg, 'Queue::Message'));
    croak "MESSAGE may not already be on a queue"
        unless (!defined($msg->{queue}));
    $msg->{queue} = $self;
    $self->{messages}->{$msg->id()} = $msg;
    # add new messages at the highest possible priority
    $self->{queue}->add($msg, 0); 
    $msg->{priority} = 0;
}

# attempt_interval MESSAGE
# How often should delivery attempts be made for MESSAGE?
sub attempt_interval ($) {
    my Queue::Message $msg = shift;
    my $age = time() - $msg->starttime();
    if ($age < 15 * 60) {
        # Once per minute for 15 minutes.
        return 60;
    } elsif ($age < 60 * 60) {
        # Then once every 5 minutes for another 45 minutes.
        return 300;
    } else {
        # Then every hour.
        return 3600;
    }
}

# finish MESSAGE
# Push a completed or failed MESSAGE onto the finished queue for passing back
# to the database.
sub finish ($$) {
    my Queue $self = shift;
    my Queue::Message $msg = shift;
    delete($self->{messages}->{$msg->id()});
    push(@{$self->{finished}}, $msg);
}

# requeue MESSAGE [INTERVAL]
# Following an event on MESSAGE, reinsert it into the queue of messages to
# send, unless it has failed or is completed, in which case add it to the list
# of finished messages. If INTERVAL is specified, it overrides the default
# retry interval for MESSAGE.
sub requeue ($$) {
    my Queue $self = shift;
    my Queue::Message $msg = shift;
    if (Queue::Message::STATE_BAD == $msg->state()
        || Queue::Message::STATE_DONE == $msg->state()) {
        $self->finish($msg);
    } else {
        # decide when it should be redelivered
        my $when = time();
        if (@_) {
            $when += $_[0];
        } else {
            $when += attempt_interval($msg);
        }
        $self->{queue}->add($msg, $when);
        $msg->{priority} = $when;
    }
}

# pre_select RDS WRS
#
sub pre_select ($$$) {
    my Queue $self = shift;
    my IO::Select $rds = shift;
    my IO::Select $wrs = shift;

    # Now see whether we should start any more connections.
    my $now = time();
    return if ($self->{lastcheckedqueue} > $now - 1);
    $self->{lastcheckedqueue} = $now;
    Log::print('noise', "iterating over queue");

    my $transport = Email::Sender::Transport::SMTP->new;

    # The queue allows us to find the nominal retry time for the
    # next-most-urgent message, and its identity.
    my $level;
    while (defined($level = $self->{queue}->next_level()) && $level <= $now) {
        my $msg = $self->{queue}->pop();
            # the message has now been popped off the queue; if it is not
            # assigned to a sender and there are to be any further attempts it
            # must be requeued later
Log::print('debug', "considering ", $msg->id());

        # If this message has already been delivered, or has failed
        # permanently, retire it from the queue.
        if ($msg->state() != Queue::Message::STATE_PENDING) {
Log::print('debug', "  -> already delivered/failed, retiring");
            # if it isn't pending, it's been dealt with
            $self->finish($msg);
            next;
        }

        # If the message is too old, fail it.
        if (!$self->{noexpire}
            && $msg->createdtime() < time() - MAX_MESSAGE_AGE) {
Log::print('debug', "  -> too old; failing");
            $msg->addevent(Queue::Message::EVENT_PERM_FAILURE);
            next;
        }
        
Log::print('debug', "  -> will attempt delivery of ", $msg->id());

        try {
            Email::Sender::Simple->send($msg->text(), {
                transport => $transport,
                from => $msg->sender(),
            });
            $msg->addevent(Queue::Message::EVENT_DELIVERED);
        } catch {
            my $error = $_ || 'unknown error';
            if (try { $error->isa('Email::Sender::Failure::Permanent') }) {
                $msg->addevent(Queue::Message::EVENT_PERM_FAILURE);
            } elsif (try { $error->isa('Email::Sender::Failure::Temporary') }) {
                $msg->addevent(Queue::Message::EVENT_TEMP_FAILURE);
            } else {
                die $error;
            }
        };
    }
    Log::print('noise', 'finished iterating over queue');
}

# post_select RDS WRS
#
sub post_select ($$$) {
    my Queue $self = shift;
    my ($rds, $wrs) = @_;

    # Record some current state info to the log, and also put it in the process
    # title so it is visible to administrators.
    Log::printf('noise', 'currently have %d mails on queue',
                    scalar(keys(%{$self->{messages}})));
    $0 = sprintf('petemaild (main process; %d mails on queue)',
                    scalar(keys(%{$self->{messages}})));
}

# get_finished
# Return the next finished message, or undef if there is none.
sub get_finished ($) {
    my Queue $self = shift;
    return shift(@{$self->{finished}});
}

#
# Message used to communicate between the database subprocess and the source.
# 
package Source::Packet;

use Storable;

use fields qw(type data wire);

            # a new message to be sent
use constant TYPE_NEWMESSAGE => 0;
            # identified message has been delivered
use constant TYPE_DELIVERED =>  1;
            # identified message could not be delivered
use constant TYPE_FAILED =>     2;
            # shutting down, please exit
use constant TYPE_QUIT =>       3;

my @typename = qw(TYPE_NEWMESSAGE TYPE_DELIVERED TYPE_FAILED TYPE_QUIT);

# new TYPE DATA
# 
sub new ($$$) {
    my Source::Packet $self = shift;
    my ($type, $data) = @_;
    
    $self = fields::new($self)
        unless (ref($self));

    $self->{type} = $type;
    $self->{data} = $data;

    return $self;
}

# parse BUFFER
# BUFFER is a reference to a buffer. Returns undef if no packet is available or
# a packet object if one is, shifting the buffer to the beginning of the next
# packet.
sub parse ($) {
    my $buf = shift;
    return undef if (length($$buf) < 4);
    my $l = unpack('N', $$buf);
    return undef if (length($$buf) < $l + 4);
    my $d = Storable::thaw(substr($$buf, 4, $l));
    die "bad wire data" if (!defined($d));
    die "wire data should be reference to list" unless (ref($d) eq 'ARRAY');
    my ($type, $data) = @$d;
    $$buf = substr($$buf, $l + 4);  # shift buffer
    return new Source::Packet($type, $data);
}

# type
# Type of the packet.
sub type ($) {
    my Source::Packet $self = shift;
    return $self->{type};
}

# data
# Payload.
sub data ($) {
    my Source::Packet $self = shift;
    return $self->{data};
}

# wire
# On-the-wire copy of the data.
sub wire ($) {
    my Source::Packet $self = shift;
    if (!defined($self->{wire})) {
        my $w = Storable::freeze([ $self->type(), $self->data() ]);
        my $l = length($w);
        $self->{wire} = pack('N', $l) . $w;
    }
    return $self->{wire};
}

#
# The source obtains emails to send from some outside source, in this case the
# petitions database, and adds them to the queue.
# 
package Source;

use Carp;
use File::Slurp qw();
use FindBin;
use IO::Socket;

use mySociety::DBHandle qw(dbh);
use mySociety::Email;

use Petitions;

use fields qw(s pid queue q rdbuf wrbuf failed);

# Because we can't integrate PostgreSQL into the select loop in any sane
# fashion we fork a subprocess which polls the database for new messages to
# send. That's pretty lame, of course, but welcome to database land.

my $is_db_child = 0;

# new QUEUE
# 
sub new ($$) {
    my Source $self = shift;
    my Queue $queue = shift;
    
    # Ideally we'd use SOCK_DGRAM here, and on Linux it'd be OK (typically you
    # can have a packet of up to ~100KB) but for portability we resist
    # temptation and use a stream format instead.
    my ($s1, $s2) = IO::Socket->socketpair(PF_UNIX, SOCK_STREAM, 0)
        or die "socketpair: $!";
    
    $s1->blocking(0);
    $s2->blocking(0);
    
    my $pid = fork();
    if (!defined($pid)) {
        die "fork: $!";
    } elsif (0 == $pid) {
        $s1->close();
        $is_db_child = 1;
        database_child_process($s2);
        exit(0);
    } else {
        Log::print('info', "database child process is $pid");
    }

    $s2->close();

    $self = fields::new($self)
        unless (ref($self));
    
    $self->{s} = $s1;
    $self->{pid} = $pid;
    $self->{queue} = $queue;
    $self->{q} = [ ];           # confusing -- that's the packet queue
    $self->{failed} = 0;
    my $rdbuf = ''; $self->{rdbuf} = \$rdbuf;
    my $wrbuf = ''; $self->{wrbuf} = \$wrbuf;

    return $self;
}

sub s ($) {
    my Source $self = shift;
    return $self->{s};
}

sub queue ($) {
    my Source $self = shift;
    return $self->{queue};
}

sub pid ($) {
    my Source $self = shift;
    return $self->{pid};
}

sub pre_select ($$$) {
    my Source $self = shift;
    my IO::Select $rds = shift;
    my IO::Select $wrs = shift;

    while (my $msg = $self->queue()->get_finished()) {
        $self->notify($msg->id(), $msg->state() == Queue::Message::STATE_DONE);
    }
    
    $rds->add($self->{s});
    $wrs->add($self->{s}) if (length(${$self->{wrbuf}}) || @{$self->{q}});
}

sub post_select ($$$) {
    my Source $self = shift;
    my ($rds, $wrs) = @_;
    if (do_ipc($self->s(), $self->{rdbuf}, $self->{wrbuf}, $self->{q},
            sub ($) {
                my Source::Packet $packet = shift;
                if ($packet->type() == Source::Packet::TYPE_NEWMESSAGE) {
                    $self->queue()->add($packet->data());
                }
            },
            $rds, $wrs)) {
        Log::print('err', "connection to child process closed");
        $self->{failed} = 1;
    }
}

# failed
# Return true if the database child process has failed.
sub failed ($) {
    my Source $self = shift;
    return $self->{failed};
}

# notify ID RESULT
# Notify the database that processing of the message ID has been completed with
# RESULT; true means successful and false means failure.
sub notify ($$$) {
    my Source $self = shift;
    my ($id, $result) = @_;
    push(@{$self->{q}},
        new Source::Packet(
                $result
                    ? Source::Packet::TYPE_DELIVERED
                    : Source::Packet::TYPE_FAILED,
                $id));
}

# do_ipc HANDLE READBUF WRITEBUF QUEUE CALLBACK [RDS WRS]
# do_ipc HANDLE READBUF WRITEBUF QUEUE CALLBACK [DELAY]
# Perform IPC between this process and its peer over HANDLE. READBUF and
# WRITEBUF are references to scalars which are used as buffers for IO in each
# direction; QUEUE is a reference to the array of unsent Source::Packet
# objects, and CALLBACK is invoked once for each received packet with that
# packet as its single argument. If RDS and WRS are set they should be a hash
# indicating whether HANDLE is readable or writable respectively. If DELAY is
# set it indicates the timeout argument to select. Returns true if the HANDLE
# was closed.
sub do_ipc ($$$$$;$$) {
    my IO::Handle $h = shift;
    my ($rdbuf, $wrbuf, $queue, $callback, $rds, $wrs) = @_;
    my $didclose = 0;
    
    # Do the select ourself (for the child process).
    if (!defined($rds) || !defined($wrs)) {
        my $delay = $rds;
        $delay = 1 if (!defined($delay));
    
        $rds = new IO::Select();
        $wrs = new IO::Select();

        $rds->add($h);
        $wrs->add($h) if (length($$wrbuf) || @$queue);

        ($rds, $wrs) = IO::Select::select($rds, $wrs, undef, $delay)
    #        or die "select: $!";
            or return;

        $rds = {map { $_ => $_ } @$rds};
        $wrs = {map { $_ => $_ } @$wrs};
    }
    
    if (keys(%$rds)) {
        while (1) {
            while (my $packet = Source::Packet::parse($rdbuf)) {
                &$callback($packet);
            }
        
            my $n = $h->sysread($$rdbuf, 8192, length($$rdbuf));
            if (!defined($n)) {
                if ($!{EAGAIN}) {
                    last;
                } else {
                    my $what = $is_db_child
                                ? 'database process'
                                : 'parent process';
                    Log::print('err', "reading from socket in $what: $!");
                    $didclose = 1;
                    last;
                }
            } elsif (0 == $n) {
                $didclose = 1;
                last;
            }
        }
    }

    if (keys(%$wrs) && !$didclose) {
        while (length($$wrbuf) || @$queue) {
            while (@$queue && length($$wrbuf) < 32768) {
                my $pkt = shift(@$queue);
                croak("bad packet object type on queue") if (!$pkt->isa('Source::Packet'));
                $$wrbuf .= $pkt->wire();
            }

            my $n = $h->syswrite($$wrbuf, length($$wrbuf));
            if (!defined($n)) {
                if ($!{EAGAIN}){
                    last;
                } else {
                    my $what = $is_db_child
                                ? 'parent process'
                                : 'database process';
                    my $prio = $!{EPIPE} ? 'warning' : 'err';
                    Log::print($prio, "while sending data to $what: $!");
                    $didclose = 1;
                }
            } else {
                $$wrbuf = substr($$wrbuf, $n);
            }
        }
    }

    return $didclose;
}

sub DESTROY ($) {
    # Shut down the child process cleanly.
    my Source $self = shift;
    my $p = new Source::Packet(Source::Packet::TYPE_QUIT, undef);
    $self->s()->blocking(1);
    my $w = $p->wire();
    $self->s()->syswrite($w, length($w));
    $self->s()->close();
    waitpid($self->pid(), 0);
}

#
# Child process talking to the database.
#

# message_id WHAT ID
# Return a value suitable for use as a Message-ID: in an email. WHAT should be
# either "signer" or "petition" and ID should be the ID of the corresponding
# row in the database.
sub message_id ($$) {
    my ($what, $id) = @_;
    return sprintf('<%s-%d-%08x.%08x@%s>',
                $what, $id, int(rand(0xffffffff)), time(),
                mySociety::Config::get('EMAIL_DOMAIN'));
}

sub make_url {
    my ($email, $url) = @_;
    if ($email =~ /\@aol\./) {
        $url = "<a href=\" $url \">$url</a>";
    }
    return $url;
}

sub get_template($$) {
    my ($template, $p) = @_;
    my $site_name = mySociety::Config::get('SITE_NAME');
    my $e;
    if ($p->{body_ref} && -e "$FindBin::Bin/../templates/emails/$p->{body_ref}/$template") {
        $e = File::Slurp::read_file("$FindBin::Bin/../templates/emails/$p->{body_ref}/$template");
    } elsif (-e "$FindBin::Bin/../templates/emails/$site_name/$template") {
        $e = File::Slurp::read_file("$FindBin::Bin/../templates/emails/$site_name/$template");
    } else {
        $e = File::Slurp::read_file("$FindBin::Bin/../templates/emails/$template");
    }
    return $e;
}

sub email_params($) {
    my ($petition) = @_;
    my %h = (
        detail => $petition->{detail},
        content => $petition->{content},
        petitioned => mySociety::Config::get('SITE_TYPE') eq 'one'
            ? mySociety::Config::get('SITE_PETITIONED')
            : $petition->{body_name},
        creator_name => $petition->{name},
    );
    $h{content} =~ s/\r|\n/ /g;
    ($h{content_truncated} = $h{content}) =~ s/^(.{100}).{3,}$/$1.../;
    return %h;
}

# make_duplicate_email SIGNER PETITION
# Make an email for SIGNER signing PETITION, telling them they've already done
# so. Returns on-the-wire text of the email.
sub make_duplicate_email ($$) {
    my ($signer, $petition) = @_;

    my %h = email_params($petition);
    $h{user_name} = $signer->{name};
    $h{sentence} = Petitions::sentence($petition);
    $h{url} = make_url($signer->{email}, Petitions::absolute_url($petition));

    my $from_name = Petitions::from_name($petition);
    my $from_email = Petitions::admin_email($petition);
    return fix_email_link( $signer->{email}, mySociety::Email::construct_email({
        _template_ => get_template('signature-duplicate', $petition),
        _parameters_ => \%h,
        To => [[$signer->{email}, $signer->{name}]],
        From => [ $from_email, $from_name ],
        'Message-ID' => message_id('signer', $signer->{id})
    }) );
}

# make_signer_email SIGNER PETITION
# Make a confirmation email for SIGNER signing PETITION. Returns on-the-wire
# text of the email.
sub make_signer_email ($$) {
    my ($signer, $petition) = @_;
    
    my %h = email_params($petition);
    $h{user_name} = $signer->{name};
    $h{sentence} = Petitions::sentence($petition);
    $h{url} = make_url($signer->{email}, Petitions::absolute_url($petition) . Petitions::Token::make('s', $signer->{id}));

    my $from_name = Petitions::from_name($petition);
    my $from_email = Petitions::admin_email($petition);
    return fix_email_link( $signer->{email}, mySociety::Email::construct_email({
        _template_ => get_template('signature-confirm', $petition),
        _parameters_ => \%h,
        To => [[$signer->{email}, $signer->{name}]],
        From => [ $from_email, $from_name ],
        'Message-ID' => message_id('signer', $signer->{id})
    }) );
}

# make_petition_email PETITION
# Make a confirmation mail for the creation of PETITION. Returns on-the-wire
# text of the email.
sub make_petition_email ($) {
    my $petition = shift;

    my %h = email_params($petition);
    $h{url} =make_url($petition->{email}, Petitions::absolute_url($petition) . Petitions::Token::make('p', $petition->{id}));

    my $from_name = Petitions::from_name($petition);
    my $from_email = Petitions::admin_email($petition);
    return fix_email_link( $petition->{email}, mySociety::Email::construct_email ({
        _template_ => get_template('petition-confirm', $petition),
        _parameters_ => \%h,
        To => [[$petition->{email}, $petition->{name}]],
        From => [ $from_email, $from_name ],
        'Message-ID' => message_id('petition', $petition->{id})
    }) );
}

sub fix_email_link {
    my ($email, $message) = @_;
    return $message unless $email =~ /\@aol\./;
    $message =~ s/<a\s*href="\s*([^"\s]*)\s*(">[^<]*<\/a>)/<a href=" $1 $2/;
    return $message;
}

# database_child_process SOCKET
# Child process to periodically query database.
sub database_child_process ($) {
    my IO::Socket $s = shift;

    my $site_name = mySociety::Config::get('SITE_NAME');
    $site_name =~ s/,.*//;
    $0 = "petemaild (database child process for $site_name)";

    # Queue of messages to send.
    my @queue = ( );
    
    my $st_s = dbh()->prepare("
                    select id, petition_id, email, name, emailsent,
                        extract(epoch from signtime) as t
                    from signer where emailsent in ('pending', 'duplicate')
                        and id > ?
                    order by petition_id");
        # "order by petition_id" so that we only need to cache data about one
        # petition at once

    my $st_p;
    if (mySociety::Config::get('SITE_TYPE') eq 'multiple') {
        $st_p = dbh()->prepare("
            select petition.*, extract(epoch from creationtime) as t,
                body.name as body_name, body.ref as body_ref
            from petition, body where body_id = body.id and status = 'unconfirmed'
                and petition.id > ?");
    } else {
        $st_p = dbh()->prepare("
            select *, extract(epoch from creationtime) as t
            from petition where status = 'unconfirmed'
                and id > ?");
    }

    my $p;
    my $petition_id;
    my $max_signer_id = 0;
    my $max_petition_id = 0;
    my $last_full_scan = 0;
    my $nmessages = 1;
    
    # Now we run a simple loop, sending messages to the parent and receiving
    # messages from the parent until told to quit.
    my $rdbuf = '';
    my $wrbuf = '';
    my $quit = 0;
    my %already = ( );
    while (!$quit) {
        #
        # Process incoming/outgoing messages.
        # 
        my $docommit = 0;
        my $didclose = 
            do_ipc($s, \$rdbuf, \$wrbuf, \@queue,
                sub ($) {
                    my Source::Packet $packet = shift;
                    if ($packet->type() == Source::Packet::TYPE_DELIVERED
                        || $packet->type() == Source::Packet::TYPE_FAILED) {

                        my $id = $packet->data();
                        delete($already{$id});
                        if ($id =~ /^s-([1-9]\d*)$/) {
                            my $signer_id = $1;
                            # NB never unconfirm a confirmed email.
                            dbh()->do("
                                    update signer set emailsent = ?
                                    where id = ?
                                        and emailsent <> 'confirmed'", {},
                                    $packet->type() == Source::Packet::TYPE_DELIVERED
                                        ? 'sent' : 'failed',
                                    $signer_id);
                            dbh()->commit(); # XXX added later by Matthew in case of crashes; maybe
                                             # inefficient, can be done with error catching instead
                            $docommit = 1;
                        } elsif ($id =~ /^d-([1-9]\d*)$/) {
                            my $signer_id = $1;
                            # Whether the message about duplicate signature was sent or not,
                            # we don't actually mind - just set the signature back to confirmed.
                            dbh()->do("update signer set emailsent = 'confirmed'
                                where id = ?", {}, $signer_id);
                            dbh()->commit();
                            $docommit = 1;
                        } elsif ($id =~ /^p-([1-9]\d*)$/) {
                            my $petition_id = $1;
                            dbh()->do("
                                    update petition set status = ?
                                    where id = ?
                                        and status = 'unconfirmed'", {},
                                    $packet->type() == Source::Packet::TYPE_DELIVERED
                                        ? 'sentconfirm' : 'failedconfirm',
                                    $petition_id);
                            dbh()->commit(); # XXX added later by Matthew in case of crashes, as above
                            $docommit = 1;
                        } else {
                            Log::print('err', "unknown ID $id sent to child process");
                        }
                    } elsif ($packet->type() == Source::Packet::TYPE_QUIT) {
                        $quit = 1;
                    }
                },
                ($nmessages > 0 ? 0 : 0.5)
            );
        if ($docommit) {
            dbh()->commit();
        } else {
            dbh()->rollback();  # ensure we see new rows
        }

        last if ($didclose);

        my $fullscan = 0;
        if (Debug::enabled() || $last_full_scan < time() - 300) {
            $fullscan = 1;
            $last_full_scan = time();
            Log::print('debug', "doing full scan of database");
        } else {
            Log::print('debug', "doing incremental scan of database");
        }

        # See if there are any new signers...

        # Only query for petition info once around the loop.
        my %petition_cache;
            # XXX maybe invert order of doing new-signer and new-petition
            # queries and use the latter to populate the cache?

        $st_s->execute($fullscan ? 0 : $max_signer_id);
        $nmessages = 0;
        while (my $s = $st_s->fetchrow_hashref()) {
            # Grab petition info if we don't have it.
            if (!defined($p) || $p->{id} != $s->{petition_id}) {
                $petition_cache{$s->{petition_id}}
                    ||= Petitions::DB::get($s->{petition_id});
                $p = $petition_cache{$s->{petition_id}};
            }

            # XXX decide what we're doing about return-path. Possibly we should
            # VERP it.
            my $bounce = 'bounces@' . mySociety::Config::get('EMAIL_DOMAIN');
            my ($id, $email, $queuedtime);
            if ($s->{emailsent} eq 'pending') {
                $id = "s-$s->{id}";
                $email = make_signer_email($s, $p);
                $queuedtime = $s->{t};
            } else {
                $id = "d-$s->{id}";
                $email = make_duplicate_email($s, $p);
                $queuedtime = time();
            }
            push(@queue,
                    new Source::Packet(
                        Source::Packet::TYPE_NEWMESSAGE,
                        new Queue::Message(
                            $id, $bounce, $s->{email}, $email, $queuedtime,
                            undef       # set in parent process
                        )))
                unless (exists($already{$id}));
            $already{$id} = 1;
            ++$nmessages;

            $max_signer_id = $s->{id} if ($s->{id} > $max_signer_id);
        }

        my $nsigners = $nmessages;
        Log::print('debug', "have $nsigners new signature mails to send");
        Log::print('debug', "now max signer_id = $max_signer_id");

        # ... or any new petitions.
        $st_p->execute($fullscan ? 0 : $max_petition_id);
        while (my $p = $st_p->fetchrow_hashref()) {
            my $id = "p-$p->{id}";
            push(@queue,
                    new Source::Packet(
                        Source::Packet::TYPE_NEWMESSAGE,
                        new Queue::Message(
                            $id,
                            'bounces@' . mySociety::Config::get('EMAIL_DOMAIN'),
                            $p->{email},
                            make_petition_email($p),
                            $p->{t},
                            undef
                        )))
                unless (exists($already{$id}));
            $already{$id} = 1;
            ++$nmessages;

            $max_petition_id = $p->{id} if ($p->{id} > $max_petition_id);
        }

        my $npetitions = $nmessages - $nsigners;
        Log::print('debug', "have $npetitions new petition confirmation mails to send");
        Log::print('debug', "now max petition_id = $max_petition_id");
    }
}

#
# Main program.
#
package main;

use Error qw(:try);
use Getopt::Long;
use Pod::Usage;

use mySociety::PIDFile;
use mySociety::SystemMisc qw(print_log);

my $pidfilepath = mySociety::Config::get('PETEMAILD_PIDFILE', '/var/run/petemaild.pid');
my $debug = 0;
my $foreground = 0;
my $verbose = 0;
my $help = 0;
my $noexpire = 0;
if (!GetOptions(
        'pidfile=s' => \$pidfilepath,
        debug       => \$debug,
        foreground  => \$foreground,
        'verbose=i' => \$verbose,
        noexpire    => \$noexpire,
        help        => \$help
    )) {
    print_log('err', "bad options; try --help for help");
    exit(1);
}

if ($help) {
    pod2usage(-exitval => 0, -verbose => 1);
    exit(0);
}

$SIG{TERM} = $SIG{INT} = sub { $foad = 1; };

# Set logging verbosity
Log::verbose($verbose);

# Only daemonize if `--debug` or `--foreground` aren't given
if ($debug) {
    Log::stderronly(1);
    Debug::enabled(1);
} elsif ($foreground) {
    Log::stderronly(1);
} else {
    mySociety::SystemMisc::log_to_stderr(0);
    mySociety::SystemMisc::daemon();
}

my $pidfile;
try {
    $pidfile = new mySociety::PIDFile($pidfilepath);
} catch mySociety::PIDFile::Error with {
    my $E = shift;
    print_log('err', $E->text());
    exit(1);
};

# global for debugging dump of queue on SIGUSR2
our $Q;

# This one liner is useful for using the SIGUSR2 debegging. Just run it to get current queue state.
# cd /tmp; rm petemaild.context*; kill -USR2 `pgrep petemaild | head --lines=1`; sleep 1s; cat petemaild.context.* |less

# on SIGUSR2, send current context information to a file
$SIG{USR2} = sub {
    # Deliberately ignore errors
    open(FH, ">> /tmp/petemaild.context.$$");
    print FH "Carp::longmess()\n" . Carp::longmess();
    if ($Q) {
        # Print basic numbers about queue
        print FH "\nQueue info:\n";
        print FH "messages count: " . scalar(keys(%{$Q->{messages}})) . "\n";
        print FH "finished count: " . scalar(@{$Q->{finished}}) . "\n";
        print FH "lastcheckedqueue: " . $Q->{lastcheckedqueue} . "\n";
        print FH "noexpire: " . $Q->{noexpire} . "\n";
        print FH "queue count: " . $Q->{queue}->count . "\n";
        print FH "\n";

        # Hunt for missing messages, which have dropped off queue by surprise
        my %all_messages;
        foreach my $message ($Q->{queue}->get_list()) {
            $all_messages{$message->id()} = $message;
        }
        # XXX should add @finished here, but things don't last there long so doesn't matter much
        # (the finished count being nearly always zero shows that is the case)
        # ... check against main list of messages
        my $found = "";
        my $lost = "";
        foreach my $message (values(%{$Q->{messages}})) {
            my $message_debug_str = "\tid: M" . $message->id() . " state: " . $message->state();
            $message_debug_str .= " queue: " . $message->{queue}. " priority: " . $message->{priority} . " sender: " . $message->sender() . " recipient: " . $message->recipient() . "\n";
            if ($all_messages{$message->id()}) {
                $found .= $message_debug_str;
            } else {
                $lost .= $message_debug_str;
            }
        }
        print FH "\nFound messages:\n";
        print FH $found;
        print FH "\nLost messages:\n";
        print FH $lost;
    }
    close(FH);
};

$Q = new Queue($noexpire);
my $S = new Source($Q);

    # XXX ugly -- we'll drop all connections at the moment of termination.
while (!$foad) {
    my $rds = new IO::Select();
    my $wrs = new IO::Select();
    $Q->pre_select($rds, $wrs);
    $S->pre_select($rds, $wrs);
    my ($r, $w) = IO::Select::select($rds, $wrs, undef, 1);
    $rds = { map { $_ => 1 } @$r };
    $wrs = { map { $_ => 1 } @$w };
    $Q->post_select($rds, $wrs);
    $S->post_select($rds, $wrs);

    if ($S->failed()) {
        Log::print('err', "database child process failed; starting another");
        undef $S;
        $S = new Source($Q);
    }
}

exit(0);

__END__

=head1 NAME

petemaild

=head1 SYNOPSIS

petemaild --help | [OPTIONS]

=head1 DESCRIPTION

Mail-sending daemon for the petitions site.

=head1 OPTIONS

=over 4

=item --help

Display information about using the program.

=item --debug

Don't detach from controlling terminal; log diagnostics solely to STDERR; 
set a flag to indicate we're in Debug mode that triggers constant full database
scans (rather than every five minutes).

=item --foreground

Don't detach from controlling terminal; log diagnostics solely to STDERR.

=item --verbose=n

Specify amount of debug information to log, from -1 to 2.

=item --noexpire

Don't expire old messages from the queue (used by the test suite, since this
program doesn't implement the clock offset used for testing).

=item --pidfile PATH

Use PATH as the location of the PID file. By default, uses the value defined in
the config file, or "/var/run/petsignupd.pid".

=back

=head1 COPYRIGHT

Copyright (c) 2006 UK Citizens Online Democracy

=head1 VERSION

$Id: petemaild,v 1.156 2010-03-12 19:00:35 matthew Exp $
