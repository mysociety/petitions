#!/usr/bin/php -q
<?php
/*
 * response-send
 * Run from cron regularly to send out Government responses to petitions
 *
 * This script will send out messages that are marked for signers
 * and will do this by injecting them, with up to 250 recipients, directly
 * into Exim. This means we do one db_commit per 250 signers.
 *
 * It will check the load and, if over a limit it wont batch any more for
 * a while.
 *
 * Only one copy should be run at once otherwise it is quite likely that
 * duplicate messages will be sent out.
 *
 * To be explicit, this script does not send messages from the creator
 * since we currently don't do that. This feature should be simple to add.
 *
 */

# TODO

# Look at load on multiple servers
# Use multiple servers
# Check availability of servers

$short_opts = '';
$long_opts = array('verbose','help');

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once '../conf/general';
require_once "../phplib/petcli.php";
require_once "../phplib/petition.php";
require_once '../phplib/fns.php';
require_once '../commonlib/phplib/db.php';

$switches = $options[0];
$args = $options[1];

$verbose = 0;

foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--help') {
?>

Petitions response sending script. This is responsible for sending
out government responses to petitions. It should be run periodically from cron.

Usage: response-send [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

# Initialise variables
$load_check_limit = 5000; # After how many signers do we check for machine load
$iterations = $load_check_limit; # Counter to check the machine load occasionally
$messages = array(); # Global array of message bodies

$optout = array();
$query = db_getAll('SELECT lower(email) FROM optout');
foreach ($query as $r) {
        $optout[] = $r['lower'];
}

$signer_result = do_signer_query();
while($current_signer = db_fetch_array($signer_result)) {
    if ($iterations == $load_check_limit) {
        while(check_machine_load_values()) {
            verbose("Machine load too high. Sleeping.");
            sleep(10);
        }
        $iterations = 0;
    } else {
        $iterations++;
    }

    $message_id = $current_signer['message_id'];
    $signer_id = $current_signer['signer_id'];

    verbose("Got a signer - signer_id $signer_id for message $message_id");

    if(!isset($messages[$message_id])) {
        $messages[$message_id] = get_message_array($message_id);
        $messages[$message_id]['signers'] = array();
        $messages[$message_id]['message_body'] = create_message_body($messages[$message_id]);
    }
    $messages[$message_id]['signers'][$signer_id] = $current_signer['signer_email'];
    if(sizeof($messages[$message_id]['signers']) >= OPTION_PET_RESPONSE_SEND_BATCH_SIZE) {
        pump_message_to_exim($message_id);
        $messages[$message_id]['signers'] = array();
    }

}

foreach ($messages as $message_id => $message_array) {
    verbose ("Number of signers left for $message_id : " . sizeof($messages[$message_id]['signers']));
    if(sizeof($messages[$message_id]['signers']) > 0) {
        pump_message_to_exim($message_id);
    }
}

# ---

function do_signer_query() {
    # Note: sendtosigners is enough, as only government responses are sent to signers
    # Adding a circumstance check or an emailtemplatename check slows down this query
    # ten-fold
    $result = db_query_literal("
        SELECT signer.id AS signer_id, signer.email AS signer_email,
            message.id AS message_id
        FROM message, signer
        WHERE sendtosigners = 't'
            AND message.petition_id = signer.petition_id
            AND signer.signtime < message.whencreated
            AND signer.receive_updates = 't'
            AND sendtolatesigners = 'f'
            AND (select signer_id
                FROM message_signer_recipient
                WHERE message_id = message.id
                AND signer_id = signer.id) IS null
            AND signer.emailsent = 'confirmed'
            AND signer.showname = 't'
            AND signer.email != ''
    ");
    return $result;
}

function get_message_array($message_id) {
    $message_array = db_getRow(
        "SELECT petition.id, fromaddress, emailsubject, emailbody
        FROM message, petition
        WHERE message.petition_id = petition.id
            AND message.id=?",  $message_id);
    $petition = new Petition($message_array['id']);
    $message_array['petition'] = $petition;
    return $message_array;
}

function pump_message_to_exim($message_id) {
    global $messages, $optout;
    $message = $messages[$message_id];

    verbose("Pumping $message_id with " . sizeof($message['signers']) . " signers");

    # Construct message
    $any_to_send = false;
    $batched_smtp = "EHLO localhost\r\n";
    $batched_smtp .= "MAIL FROM:<bounces@" . OPTION_EMAIL_DOMAIN . ">\r\n";
    foreach ($message['signers'] as $signer_id => $signer_email) {
        if (!in_array(strtolower($signer_email), $optout)) {
            $batched_smtp .= "RCPT TO:<$signer_email>\r\n";
            $any_to_send = true;
        }
        db_do('INSERT INTO message_signer_recipient (message_id, signer_id)
            values (?, ?)', $message_id, $signer_id);
    }
    if (!$any_to_send) {
        # All opted out, store them as sent
        db_commit();
        return;
    }

    $email = $message['petition']->admin_email();
    $batched_smtp .= "DATA\r\nFrom: \"" . $message['petition']->from_name() . "\" <$email>\r\n";
    $batched_smtp .= "To: \"" . OPTION_RESPONSE_SEND_TO_NAME . "\" <$email>\r\nPrecedence: bulk\r\n";
    $batched_smtp .= $message['message_body'];
    $batched_smtp .= "\r\n.\r\n";

    $smtp_succeeded = true;
    $exim_handle = popen('/usr/sbin/exim4 -bS','w') or ( error($php_errormsg) and $smtp_succeeded=false);
    if ($smtp_succeeded && !fwrite($exim_handle, $batched_smtp)) {
        error('Exim failed to take anything.');
        $smtp_succeeded = false;
    }
    if ($smtp_succeeded) {
        $exim_exit = pclose($exim_handle);
        if ($exim_exit == 2) {
            # Everything went wrong
            $smtp_succeeded = false;
        } elseif ($exim_exit == 1) {
            # XXX: Problem - some, but not all messages were accepted...
            # This script will currently accept these losses
        }
    }

    if ($smtp_succeeded) {
        db_commit();
    } else {
        db_rollback();
    }
}

function create_message_body($message) {
    if ($message['fromaddress'] == 'admin-html') {
        $type = 'email-html';
    } else {
        $type = 'email-plain';
    }
    $out = pet_create_response_email($type, $message['petition']->url_main(),
        $message['emailsubject'], $message['emailbody']);
    return $out;
}

function check_machine_load_values() {
    $load_average_one_minute = shell_exec("uptime | cut -d ' ' -f14 | cut -d',' -f 1");
    verbose("check_machine_load_values - Load average on this machine: $load_average_one_minute");
    if ($load_average_one_minute > OPTION_PET_RESPONSE_SEND_LOAD_THRESHOLD) {
        return true;
    } else {
        return false;
    }
}

function verbose($str) {
    global $verbose;
    if ($verbose)
        fwrite(STDERR, "response-send: $str\n");
}

function error($str) {
    fwrite(STDERR, "response-send: ERROR: $str\n");
}

