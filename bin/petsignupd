#!/usr/bin/perl -w
#
# petsignupd:
# Back-end signup service for petitions site.
#
# Clients -- the web scripts on the front-end servers -- send signup details to
# us in UDP packets. On receipt of such a packet we record that a signature is
# to be made, but do not make any change to the database. Instead we set an
# alarm for a short interval in the future. Any more packets that arrive before
# the alarm fires are also recorded; when the alarm fires, we insert them all,
# commit the changes, and acknowledge them to the senders.
#
# The idea here is that a commit of ten inserts takes about as long as a commit
# of one insert, so we can improve throughput by batching inserts. That's very
# inconvenient in the front-end scripts, because it means they'd have to share
# database handles, but is easy with a coordinating daemon. If the daemon fails
# or the packets don't get through, then the web scripts emit an error.
#
# TODO: proper logging
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: petsignupd,v 1.36 2010-03-12 00:06:37 matthew Exp $';

use strict;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}

use Carp;
use Errno;
use Error qw(:try);
use Getopt::Long;
use IO::Select;
use IO::Socket;
use Pod::Usage;
use Socket;
use Tie::Cache;
use Time::HiRes qw(time alarm);
use Data::Dumper;

use mySociety::DBHandle qw(dbh);
use mySociety::Memcached;
mySociety::Memcached::set_config(mySociety::Config::get('MEMCACHE_HOST'), mySociety::Config::get('PET_DB_NAME'));
use mySociety::PIDFile;

use Petitions;
use Petitions::RPC;

#
# Managing Debug mode
#
package Debug;

my $enabled = 0;
sub enabled (;$) {
    $enabled = $_[0] if defined $_[0];
    return $enabled;
}

package Log;

my $verboselevel = 0;
sub verbose ($) {
    $verboselevel = shift;
}

my $stderronly = 0;
sub stderronly ($) {
    $stderronly = shift;
}

use mySociety::SystemMisc qw(open_log print_log);

sub do_output ($$) {
    my ($prio, $str) = @_;
    if ($stderronly) {
        STDERR->print("petsignupd: $prio: ", $str, "\n");
    } else {
        our $have_opened_log;
        if (!defined($have_opened_log) || $$ != $have_opened_log) {
            open_log('petsignupd');
            $have_opened_log = $$;
        }
        print_log($prio eq 'noise' ? 'debug' : $prio, $str);
    }
}


# signal handler to permit changing of verbose level on-the-fly.
my $changeverboselevel = 0;
$SIG{USR1} = sub { ++$changeverboselevel; };

sub print ($@) {
    my $prio = shift;

    if ($changeverboselevel) {
        $verboselevel = ($verboselevel + $changeverboselevel) % 3;
        do_output('info', "verbose level now $verboselevel");
        $changeverboselevel = 0;
    }
    
    if ($verboselevel < 2) {
        return if ($prio eq 'noise');
        return if ($verboselevel < 1 && $prio eq 'debug');
        return if ($verboselevel < 0 && $prio eq 'info');
    }
    do_output($prio, join("", @_));
}

sub printf ($$;@) {
    my $prio = shift;
    my $fmt = shift;
    Log::print($prio, sprintf($fmt, @_));
}

package main;

# do_pending
# Actually perform the queue of requests against the database.
my %pending = ( );
my %cache;
my $s;
sub do_pending () {
    my $t0 = time();
    
    my $signercount = { };
    foreach my $r (values(%pending)) {
        if (exists($r->{confirm})) {
            Petitions::RPC::confirm_db($r, $signercount);
        } else {
            Petitions::RPC::sign_petition_db($r);
        }
    }

    foreach my $id (keys(%$signercount)) {
        dbh()->do('update petition set cached_signers = cached_signers + ?,
                   lastupdate = ms_current_timestamp()
                   where id = ?', {}, $signercount->{$id}, $id);
        mySociety::Memcached::set("lastupdate:$id", time());
    }
    
    dbh()->commit();

    my $t1 = time();
    Log::printf('debug', 'writing to db took %fs', $t1 - $t0);

    $s->blocking(1);
    my $maxtime = 0;
    foreach my $r (values(%pending)) {
        $cache{$r->{cookie}} = 1;
        my $packet = Petitions::RPC::make_ack_packet($r->{cookie});
        my ($port, $ip) = sockaddr_in($r->{client});
        if (!$s->send($packet, 0, $r->{client})) {
            Log::print('err', "sending ack to @{[ inet_ntoa($ip) ]}:$port: $!");
        } else {
            $maxtime = time() - $r->{time} if (time() - $r->{time} > $maxtime);
            Log::printf('debug', 'send ack to %s:%d cookie %s',
                        inet_ntoa($ip), $port, unpack('h*', $r->{cookie}));
        }
    }
    $s->blocking(0);

    Log::printf('debug', 'sending acks took %fs; max %fs since request received',
                time() - $t1, $maxtime);
}

# Entry point.
my $max_signup_time = mySociety::Config::get('MAX_SIGNUP_TIME', 0.1);
my $pidfilepath = mySociety::Config::get('PETSIGNUPD_PIDFILE', '/var/run/petsignupd.pid');
my $debug = 0;
my $foreground = 0;
my $verbose = 0;
my $help = 0;
if (!GetOptions(
        'pidfile=s' => \$pidfilepath,
        debug       => \$debug,
        foreground  => \$foreground,
        'verbose=i' => \$verbose,
        help        => \$help
    )) {
    Log::print('err', "bad options; try --help for help");
    exit(1);
}

if ($help) {
    pod2usage(-exitval => 0, -verbose => 1);
    exit(0);
}

# Set logging verbosity
Log::verbose($verbose);

# Only daemonize if `--debug` or `--foreground` aren't given
if ($debug) {
    Log::stderronly(1);
    Debug::enabled(1);
} elsif ($foreground) {
    Log::stderronly(1);
} else {
    mySociety::SystemMisc::log_to_stderr(0);
    mySociety::SystemMisc::daemon();
}

my $pidfile;
try {
    $pidfile = new mySociety::PIDFile($pidfilepath);
} catch mySociety::PIDFile::Error with {
    my $E = shift;
    Log::print('err', $E->text());
    exit(1);
};

Log::print('info', "starting up");

$s = new IO::Socket::INET(
                    LocalAddr => '0.0.0.0',
                    LocalPort => mySociety::Config::get('PETSIGNUPD_PORT'),
                    Type => SOCK_DGRAM,
                    Proto => 'udp', # Socket.pm defines IPPROTO_TCP but not
                                    # IPPROTO_UDP. Lame lame lame.
                    ReuseAddr => 1,
                    Blocking => 0) or die "socket: $!";

my $foad = 0;
$SIG{TERM} = $SIG{INT} = sub { $foad = 1; };

my $alarm_pending = 0;
my $alarm_fired = 0;
$SIG{ALRM} = sub { $alarm_fired = 1; $alarm_pending = 0; };

tie(%cache, 'Tie::Cache', 5000);

my $t0;
while (!$foad) {
    my $buf = '';
    my $sender;
    my @ready = IO::Select->new($s)->can_read($max_signup_time / 10);
    if (@ready) {
        while (defined($sender = $s->recv($buf, 65536, 0))) {
            my ($port, $ip) = sockaddr_in($sender);
            if (my $r = Petitions::RPC::parse_packet($buf)) {
                # We have a valid request. Schedule an alarm so that we will
                # send a response within the deadline.
                if (!$alarm_pending) {
                    $t0 = time();
                    $alarm_pending = 1;
                    alarm($max_signup_time);
                }

                # Record address to which we send acknowledgement.
                $r->{client} = $sender;
                $r->{time} = time();

                # See if this is a packet we've recently processed. If it is,
                # immediately send an acknowledgement. Otherwise, add it to the
                # list of requests to process later.
                if (exists($cache{$r->{cookie}})) {
                    Log::printf('noise', 'early ack duplicate request from %s:%d cookie %s',
                                inet_ntoa($ip), $port,
                                unpack('h*', $r->{cookie}));
                    my $ack = Petitions::RPC::make_ack_packet($r->{cookie});
                    $s->send($ack, 0, $r->{client});
                        # don't care much if this fails
                } elsif (!exists($pending{$r->{cookie}})) {
                    Log::printf('noise', 'new request from %s:%d cookie %s',
                                inet_ntoa($ip), $port,
                                unpack('h*', $r->{cookie}));
                    $pending{$r->{cookie}} = $r;
                } else {
                    Log::printf('noise', 'duplicate request from %s:%d cookie %s',
                                inet_ntoa($ip), $port,
                                unpack('h*', $r->{cookie}));
                }

                # Done handling this request.
            } else {
                # Invalid packet of some sort. Log and continue.
                Log::printf('err', 'bad packet from %s:%d',
                            inet_ntoa($ip), $port);
            }
        }
        
        if (!$!{EAGAIN}) {
            Log::printf('err', 'recvfrom: %s', $!);
        }
    }

    # If the alarm has fired, then do the signatures and send the
    # acknowledgements to the clients.
    if ($alarm_fired && keys(%pending)) {
        my $n = scalar(keys(%pending));
        Log::printf('debug', 'alarm fired; have %d signatures to make', $n);
        try {
            do_pending();
            $alarm_fired = 0;
        } catch mySociety::DBHandle::Error with {
            my $E = shift;
            Log::printf('err', 'committing %d requests failed; DB error: %s',
                        scalar(keys(%pending)), $E->text());
        };
        %pending = ( );
        my $t1 = time();
        Log::printf('debug', 'time from first request %fs; %f sigs/s',
                    $t1 - $t0, $n / ($t1 - $t0));
    }
}

if (keys(%pending)) {
    try {
        do_pending();
    } catch mySociety::DBHandle::Error with {
        my $E = shift;
        Log::printf('err', 'committing %d requests failed (at shutdown); DB error: %s',
                    scalar(keys(%pending)), $E->text());
    };
}

untie(%cache);

exit(0);

__END__

=head1 NAME

petsignupd

=head1 SYNOPSIS

petsignupd --help | [OPTIONS]

=head1 DESCRIPTION

Signup-processing daemon for the petitions site.

=head1 OPTIONS

=over 4

=item --help

Display information about using the program.

=item --debug

Don't detach from controlling terminal; log diagnostics solely to STDERR and 
set a flag to indicate we're in Debug mode.

=item --foreground

Don't detach from controlling terminal; log diagnostics solely to STDERR.

=item --verbose=n

Specify amount of debug information to log, from -1 to 2.

=item --pidfile PATH

Use PATH as the location of the PID file. By default, uses the value defined in
the config file, or "/var/run/petsignupd.pid".

=back

=head1 COPYRIGHT

Copyright (c) 2006 UK Citizens Online Democracy

=head1

$Id: petsignupd,v 1.36 2010-03-12 00:06:37 matthew Exp $
