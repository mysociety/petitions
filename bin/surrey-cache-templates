#!/usr/bin/perl -w
#
# surrey-cache-templates
#
# This script will run daily overnight to fetch and cache various
# council headers and footers to be used for the Surrey petitions website.

# TODO: Add CSS and RSS links in headers.

use strict;
use File::Slurp;
use FindBin;
use LWP::Simple;

use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::Memcached;
mySociety::Memcached::set_config(mySociety::Config::get('MEMCACHE_HOST'), mySociety::Config::get('PET_DB_NAME'));
use Petitions;

my ($header, $footer);
my $template_root = "$FindBin::Bin/../templates";

# Surrey
my $header1 = get_page('http://www.surreycc.gov.uk/web-templates/e-petitions?SQ_DESIGN_NAME=head');
my $header2 = get_page('http://www.surreycc.gov.uk/web-templates/e-petitions?SQ_DESIGN_NAME=body_header');

if ($header1 && $header2) {
    $header = $header1;
    $header .= <<EOF;
<link rel="stylesheet" type="text/css" href="/pet.css" />
<link rel="stylesheet" type="text/css" href="/assets/surreycc/css.css" />
EOF
    $header .= $header2;
    $header =~ s/(<title>Surrey County Council -) .*?(<\/title>)/$1 PARAM_TITLE$2/;
    $header =~ s/<link rel="alternate" type="application\/rss+xml".*? \/>/PARAM_RSS_LINKS\nPARAM_SUBJECTS/;
    $header =~ s/<link rel="alternate" type="application\/rss+xml".*? \/>//g;
    $header =~ s/(<meta name="DC\.Identifier".*?")http.*?"/$1PARAM_DC_IDENTIFIER"/;
    $header .= "\n<h1>PARAM_H1</h1>\n";
}

$footer = get_page('http://www.surreycc.gov.uk/web-templates/e-petitions?SQ_DESIGN_NAME=body_footer');
output('surreycc', $header, $footer);

# Surrey Heath
# File is provided as one single file, so we need to split it up
my $surrey_heath_template = get_page('http://www.surreyheath.gov.uk/introduction-e-petitions');
my @surrey_heath_parts = split(/<p><strong>Petition stuff goes here<\/strong><\/p>/, $surrey_heath_template);
$header = $surrey_heath_parts[0];
$header =~ s/<title>Introduction to e-petitions/<title>PARAM_TITLE/;
$header =~ s{<h1 id="page-title">.*</h1>}{<h1 id="page-title">PARAM_H1</h1>};
$header =~ s{<ol id="crumbs" class="clearfix">.*</ol>}{<ol id="crumbs" class="clearfix">
<li class="crumb crumb-first">
    <span typeof="v:Breadcrumb">
        <a rel="v:url" property="v:title" href="/">Introduction to e-petitions</a>
    </span>
</li>
<li class="crumb crumb-last">
    <span class="crumb-separator"> &raquo; </span>
    <span typeof="v:Breadcrumb">
        <span property="v:title">PARAM_H1</span>
    </span>
</li></ol>};
# Surrey heath's template has lots of relative urls we need to fix, but also
# protocol relative urls that we don't want to fix
$header =~ s/href="(\/[^"^\/]{1}[^"]+)"/href="http:\/\/www.surreyheath.gov.uk$1"/g;
$header =~ s/src="(\/[^"^\/]{1}[^"]+)"/src="http:\/\/www.surreyheath.gov.uk$1"/g;
$header =~ s{</head>}{<link rel="stylesheet" type="text/css" href="/pet.css" />
<link rel="stylesheet" type="text/css" href="/assets/surreyheath/css.css" />
</head>};

$footer = $surrey_heath_parts[1];
$footer =~ s/href="(\/[^"^\/]{1}[^"]+)"/href="http:\/\/www.surreyheath.gov.uk$1"/g;
$footer =~ s/src="(\/[^"^\/]{1}[^"]+)"/src="http:\/\/www.surreyheath.gov.uk$1"/g;
output('surreyheath', $header, $footer);

# Elmbridge
$header = get_page('http://emaps.elmbridge.gov.uk/ebc_header_new.htm');
$header =~ s/<title>/<title>PARAM_TITLE - /;
$header =~ s{</head>}{<link rel="stylesheet" type="text/css" href="/pet.css" />
<link rel="stylesheet" type="text/css" href="/assets/elmbridge/css.css" />
</head>};
$header .= '&gt; <a href="/">E-petitions</a> &gt; PARAM_H1';
# Have to close off all the <div>s their page opens for the breadcrumb
$header .= "\n</div>\n</div>\n</div>\n</div>\n</div>\n"; # Yep, five divs deep!
$header .= "\n<div id='mysociety' class='clearfix'>\n";
$footer = "\n</div>\n";
$footer .= get_page('http://emaps.elmbridge.gov.uk/ebc_footer_new.htm');
output('elmbridge', $header, $footer);

# Tandridge
$header = get_page('http://www.tandridge.gov.uk/Portals/0/HtmlTemplates/Header.html');
$header =~ s/<title>/<title>PARAM_TITLE - Tandridge District Council/;
$header =~ s{</head>}{<link rel="stylesheet" type="text/css" href="/pet.css" />
<link rel="stylesheet" type="text/css" href="/assets/tandridge/css.css" />
</head>};
$header =~ s{</body> </html>}{};
$header .= "<div id='mysociety'>\n";
$footer = "</div>\n";
$footer .= get_page('http://www.tandridge.gov.uk/Portals/0/HtmlTemplates/Footer.html');
$footer =~ s/<html>.*<body>//s;
output('tandridge', $header, $footer);

sub output {
    my ($dir, $header, $footer) = @_;

    my $flush = 0;

    my $template_dir = "$template_root/$dir";
    mkdir($template_dir);

    if ($header) {
        my $current_header = read_file("$template_dir/head.html", err_mode => 'quiet');
        if ($current_header ne $header) {
            write_file("$template_dir/head.html", { atomic => 1, binmode => ':utf8' }, \$header);
            $flush = 1;
        }
    }
    if ($footer) {
        my $current_footer = read_file("$template_dir/foot.html", err_mode => 'quiet');
        if ($current_footer ne $footer) {
            write_file("$template_dir/foot.html", { atomic => 1, binmode => ':utf8' }, \$footer);
            $flush = 1;
        }
    }

    if ($flush) {
        my $ids = dbh()->selectcol_arrayref('select id from petition where body_id=(select id from body where ref=?)', {}, $dir);
        foreach (@$ids) {
            mySociety::Memcached::set("lastupdate:$_", time());
        }
    }
}

sub get_page {
    my $url = shift;
    my $r = LWP::Simple::get($url);
    return $r || '';
}
