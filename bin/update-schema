#!/usr/bin/env perl

=head1 NAME

bin/update-schema - minimalist database upgrades

=head1 SYNOPSIS

This script should hopefully work out at what state the database is and, if
the commit argument is provided, run the right schema files to bring it up to
date.

    # show status and upgrades available
    update-schema
    update-schema --commit   # run all available upgrades

    # list downgrades, (and run them with --commit)
    update-schema --downgrade
    update-schema --downgrade --commit  # if there is only one available downgrade
    update-schema --downgrade --version=0031 --commit

    # show this help
    update-schema --help

=cut

use strict;
use v5.14;

use FindBin;
my $repo;
BEGIN {
    $repo = "$FindBin::Bin/..";
}
use lib "$repo/perllib";
use lib "$repo/commonlib/perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$repo/conf/general");
}
use mySociety::DBHandle qw(dbh select_all);
use Petitions; # To connect to the database
use Getopt::Long;
use Pod::Usage;

my ($commit, $version, $downgrade, $help);

GetOptions (
    'commit'    => \$commit,
    'version=s' => \$version,
    'downgrade' => \$downgrade,
    'help|h|?'  => \$help,
);

pod2usage(1) if $help;

$commit = 1 if @ARGV && $ARGV[0] eq '--commit';

my $nothing = 1;
my $current_version;

sub get_and_print_current_version {
    my $new_current_version = get_db_version();
    if ($new_current_version ne ($current_version||'')) {
        print "Current database version = $new_current_version\n";
    }
    $current_version = $new_current_version;
}

get_and_print_current_version();

print "= Dry run =\n" unless $commit;

my $upgrade = !$downgrade;

sub get_statements {
    my $path = shift;
    open(my $FP, '<', $path) or die $!;
    my @statements;
    my $s = '';
    my $in_function = 0;
    while(<$FP>) {
        next if /^--/; # Ignore comments
        $s .= $_;
        # Functions may have semicolons within them
        $in_function = 1 if /create (or replace )?function/i;
        $in_function = 0 if /language (sql|'plpgsql')/i;
        if ($s =~ /;/ && !$in_function) {
            push @statements, $s;
            $s = '';
        }
    }
    close $FP;
    return @statements;
}

sub run_statements {
    foreach my $st (@_) {
        print ".";
        dbh()->do($st);
    }
    print "\n";
}

if ($upgrade && $current_version eq 'EMPTY') {
    print "* Database empty, loading in whole schema\n";
    $nothing = 0;
    if ($commit) {
        run_statements(get_statements("$repo/db/schema.sql"));
    }
} elsif ($upgrade) {
    if ($version) {
        die "Not currently implemented";
    }
    for my $path (glob("$repo/db/schema_*")) {
        my ($name) = $path =~ /schema_(.*)\.sql$/;
        next if $name le $current_version;
        next if $name =~ /$current_version-/; # For number only match
        print "* $name\n";
        $nothing = 0;
        next unless $commit;

        my @statements = get_statements($path);

        if (@statements) {
            run_statements(@statements);
        }
    }
}

if ($downgrade) {
    my %downgrades;
    for my $path (glob("$repo/db/downgrade_*")) {
        my ($from, $to) = $path =~ /downgrade_(.*)---(.*)\.sql$/;
        next unless $from eq $current_version;
        $downgrades{$to} = $path;
    }
    if (keys %downgrades) {
        if (scalar keys %downgrades == 1) {
            ($version) = (keys %downgrades) unless $version;
        }

        if (my $path = $downgrades{$version}) {
            print "Downgrade to $version\n";
            $nothing = 0;

            if ($commit) {
                my @statements = get_statements($path);
                run_statements(@statements);
            }
        } else {
            warn "No downgrade to $version\n";
        }

        if ($nothing) {
            for my $version (sort keys %downgrades) {
                print "* $version\n";
            }
        }
    }
    else {
        print "No downgrades available for this version\n";
    }
}

if ($nothing) {
    print "Nothing to do\n" if $nothing;
}
else {
    get_and_print_current_version();
}

# ---

# By querying the database schema, we can see where we're currently at
# (assuming schema change files are never half-applied, which should be the case)
sub get_db_version {
    return 'EMPTY' if ! table_exists('petition');
    return '0001' if column_exists('signer', 'receive_updates');
    return '0000' if table_exists('petition');
    die "Database schema issue!";
}

# Returns true if a table exists
sub table_exists {
    my $table = shift;
    return dbh()->selectrow_array('select count(*) from pg_tables where tablename = ?', {}, $table);
}

# Returns true if a column of table exists
sub column_exists {
    my ( $table, $column ) = @_;
    return dbh()->selectrow_array('select count(*) from pg_class, pg_attribute WHERE pg_class.relname=? AND pg_attribute.attname=? AND pg_class.oid=pg_attribute.attrelid AND pg_attribute.attnum > 0', {}, $table, $column);
}
