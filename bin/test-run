#!/usr/bin/perl -w -I../commonlib/perllib
#
# test-run:
# Test harness for petitions. Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for petitions, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a petitions database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#
# TODO: 
# Add expat testing
# Partially rejected petitions
# Resubmit and accept a previously partially rejected petition
# Search by category
# Actually test message expiry rather than use --noexpire
# Partially sign up, closure happens, a response is sent, complete sign up, check get response
# HTML mail test could be better
# Redrafting from admin interface

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.106 2010-03-31 20:24:06 matthew Exp $';

use strict;
require 5.8.0;

use mySociety::SystemMisc;
use mySociety::Config;
mySociety::Config::set_file('../conf/general');
mySociety::Config::test_run();
use mySociety::DBHandle qw(dbh);
use mySociety::Memcached;
mySociety::Memcached::set_config(mySociety::Config::get('MEMCACHE_HOST'), mySociety::Config::get('PET_DB_NAME'));
use mySociety::WebTestHarness;

use POSIX;

my @actions = ('main', 'council', 'rejection', 'timeout', 'resubmit', 'early', 'disabled');
my %actions_desc = (
    main => 'Create petition, sign it, sign duplicate, wait until completion, send two government responses',
    council => 'Create a council petition, check admin related emails are sent correctly',
    rejection => 'Make a petition, and reject it, resubmit, and reject again',
    timeout => 'Test timeout for petitions which have been rejected once but not resubmitted',
    resubmit => 'Make a petition, and reject it, resubmit, and approve. Also test admin deadline changing and removal',
    early => 'Create petition, sign it, send government response, sign it some more',
    disabled => 'Check that you cannot create or sign petitions if the relevant config variables are set',
);

date_print("Set up web test harness...");
my ($wth, $action, $verbose, $pause, $multispawn) = mySociety::WebTestHarness::setup({
    actions => \@actions,
    actions_desc => \%actions_desc,
    dbname => 'PET',
    no_validate_html => 1,
});

# Set up options
our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $auth_user = mySociety::Config::get('AUTH_USER');
our $auth_password = mySociety::Config::get('AUTH_PASSWORD');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
our $contact_email = mySociety::Config::get('CONTACT_EMAIL');
our $test_email_prefix = mySociety::Config::get('TEST_EMAIL_PREFIX');
sub email_n { my $n = shift; return "$test_email_prefix+$n\@$email_domain"; }
sub name_n { my $n = shift; return "Persephone Petitioner $n"; }
my $named_fcgi_processes = '"^(ref-index.cgi|ref-sign.cgi|reject.cgi)\$"';

#############################################################################
# Main code

# Make sure nothing is in memcached
mySociety::Memcached::flush_all();

# Kill FastCGI processes
mySociety::SystemMisc::kill_named_processes(SIGKILL, $named_fcgi_processes);

# Configure test harness class
$base_url =~ m{^http://(.+)/?$};
$wth->browser_credentials("$1:80", "ePetitions staging site", $auth_user, $auth_password); 
$wth->browser_credentials("$1:80", "$1 admin pages", $auth_user, $auth_password);
mySociety::SystemMisc::kill_named_processes(SIGKILL, $named_fcgi_processes);
$wth->log_watcher_self_test($base_url . "/test.php?error=1", "deliberate_error_to_test_error_handling");

# Start email and signup daemons
my $petemaild_pid;
my $petsignupd_pid;
END {
    my $exit_code = $?;
    # When script exits, get the email and signup daemons to gracefully shutdown
    kill(POSIX::SIGHUP, $petemaild_pid) if $petemaild_pid;
    kill(POSIX::SIGHUP, $petsignupd_pid) if $petsignupd_pid;
    # Wait for all children to have exited
    while (1) {
        my $wait_pid = wait();
        last if ($wait_pid == -1);
    }
    exit($exit_code);
};
date_print("Starting daemons...");
$petemaild_pid = fork();
die "failed to fork" if (!defined($petemaild_pid));
my $daemon_verbose = -1;
$daemon_verbose = 0 if ($verbose > 1);
if ($petemaild_pid == 0) {
    exec("./petemaild", "--debug", "--verbose=$daemon_verbose", "--noexpire");
    exit;
}
$petsignupd_pid = fork();
die "failed to fork" if (!defined($petsignupd_pid));
if ($petsignupd_pid == 0) {
    exec("./petsignupd", "--debug", "--verbose=$daemon_verbose");
    exit;
}

# Syntax check all .php files
date_print("Syntax check all PHP files...");
$wth->php_check_syntax("../");
$wth->php_check_syntax("../templates/emails/", qr//);

# Run tests specified
foreach (@actions) {
    next unless $action->{$_};
    date_print($actions_desc{$_}) if $actions_desc{$_};
    do_main_test() if $_ eq 'main';
    do_council_test() if $_ eq 'council';
    do_rejection_test() if $_ eq 'rejection';
    do_timeout_test() if $_ eq 'timeout';
    do_resubmit_test() if $_ eq 'resubmit';
    do_early_response_test() if $_ eq 'early';
    do_disabled_test() if $_ eq 'disabled';
}

# Check for any unhandled mails or errors
call_send_messages();
call_mark_finished();
date_print("Checking no emails left at end...");
$wth->email_check_none_left();
date_print("Checking no log file errors at end...");
$wth->log_watcher_check();
date_print("Everything completed successfully");

#############################################################################
# General functions

# Print log line with date
sub date_print {
    print scalar localtime() . ' ' . shift() . "\n";
}

# Print what we're doing
sub comment {
    my $comment = shift;
    date_print("  $comment") if $verbose > 0;
}

# Change the date that all parts of ePetitions think is today.  Call with no
# parameters to reset it to the actual today.
sub set_pet_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate');
        dbh()->do('insert into debugdate (override_today) values (?)', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate');
    }
    dbh()->commit();
}

# Call send messages cron job
sub call_send_messages {
     $wth->multi_spawn($multispawn, "php send-messages " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
     $wth->multi_spawn($multispawn, "php response-send " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
}

# Call mark finished cron job
sub call_mark_finished {
     $wth->multi_spawn($multispawn, "php mark-finished " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
}

# Call update signature totals
sub call_update_totals {
     $wth->multi_spawn($multispawn, "./update-totals all", $verbose);
}

sub call_remove_old {
    $wth->multi_spawn($multispawn, './remove-old-data', $verbose);
}

#############################################################################
# Create petition, sign it, wait until completion, send government response

sub do_create_part {
    my ($fields1, $fields2) = @_;
    comment("Create a new petition");
    $wth->browser_follow_link(text_regex => qr/Create a petition/);
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => $fields1,
                button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => $fields2,
                button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have sent you an email to confirm");
}

sub do_main_test {
    set_pet_date('1988-08-08');

    my $petition_text = "take action on every petition on this site with more than 1000 signers";

    comment("Check front page works");
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Petitions");
    $wth->browser_check_no_contents("1 signature");

    do_create_part({
        pet_content => $petition_text,
        detail => "I think it is very important that the Prime Minister takes all petitions seriously. He should be compelled to do anything that more than 1000 people sign, as this would be good for democracy and not at all exploitable by small groups of people.\n\nMy favourite thing about this petition is that it has two paragraphs of text in the description. That rocks!",
        rawdeadline => 'Dec 31st',
        ref => 'onethousand',
        category => 521
    }, {
        name => name_n(99),
        organisation => "Society for the Advancement of Effective Petitioning",
        address => "The Beseechment Building\nImportuning Island",
        postcode => "SW1A 2AA",
        telephone => "01234 56789",
        email => email_n(99),
        email2 => email_n(99)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(99).'" <'.email_n(99).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%To: '.email_n(99).'%Subject: Your petition to the Prime Minister has been approved%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("1 signature");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("31 December 1988");
    $wth->browser_check_contents('signForm');

    comment("Loop through several signers");
    my $c = 1;
    my $petition_uri = $wth->browser_uri();
    foreach my $signer_no (1488..1490) {
        comment("Sign the petition");
        $wth->browser_submit_form(form_name => 'signForm',
                fields => {
                    name => name_n($signer_no),
                    email => email_n($signer_no),
                    email2 => email_n($signer_no),
                    address => "$signer_no Signature Street\n\nSealville",
                    postcode => "EH99 1SP",
                    }, button => 'submit') or die "Failed to submit sign petition";
        $wth->browser_check_contents("We have sent you an email");

        comment("Find confirmation email");
        my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n($signer_no).'" <'.email_n($signer_no).'>%Please click on the link below to confirm your signature%');
        die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
        my $confirm_signature_link = $1;
        if ($signer_no == 1490) {
            comment("Confirm signature by administrator");
            $wth->browser_get($admin_approve_link);
            $wth->browser_follow_link(text_regex => qr/Draft/);
            $wth->browser_check_contents("Petitions and signers");
            $wth->browser_check_no_contents($petition_text);
            $wth->browser_follow_link(text_regex => qr/Live/);
            $wth->browser_check_contents($petition_text);
            $wth->browser_follow_link(text => 'admin');
            $wth->browser_check_contents($petition_text);
            $wth->browser_submit_form(form_name => 'petition_admin_search',
                fields => { 'search' => '1490' } ) or die 'Failed to submit admin search form';
            $wth->browser_submit_form(form_name => 'petition_admin_signature_confirmation',
                fields => { 'update_signer[]' => 19 }) or die "Failed to submit admin confirm signer form"; # XXX 19 shouldn't be hard-coded!
            $wth->browser_check_contents("Those signers have been confirmed");
            $wth->browser_check_no_contents("confirm_all");
        } else {
            comment("Confirm signature by user clicking link");
            comment("Confirmation link: $confirm_signature_link");
            $wth->browser_get($confirm_signature_link);
            $wth->browser_check_contents("You are now signed up to this petition.");
        }

        comment("Check it says it is signed on the front page");
        call_update_totals();
        $wth->browser_get($base_url);
        $wth->browser_check_contents($petition_text);
        $c++;
        $wth->browser_check_contents("$c signatures");

        $wth->browser_get($petition_uri);
    }

    comment("One signer sign the petition again");
    $wth->browser_submit_form(form_name => 'signForm', fields => {
        name => name_n(1489),
        email => email_n(1489),
        email2 => email_n(1489),
        address => "1489 Signature Street\n\nSealville",
        postcode => "EH99 1SP",
    }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_contents("We have sent you an email");

    comment("Find duplicate email");
    $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n(1489).'" <'.email_n(1489).'>%already signed up%');

    comment("Delete a signer from the administration interface");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_follow_link(text_regex => qr/Live/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents(name_n(1489));
    $wth->browser_check_contents("Signers \\(3 confirmed, 0 unconfirmed\\)");
    $wth->browser_submit_form(form_name => 'petition_admin_signature_removal',
        fields => { 'update_signer[]' => [18, 2] }) or die "Failed to submit admin remove signer form";
         # XXX 18 shouldn't be hard-coded!
    $wth->browser_check_contents("Those signers have been removed");
    $wth->browser_check_contents("Reinstate.*?" . name_n(1489));
    $wth->browser_check_contents("Signers \\(2 confirmed, 0 unconfirmed\\)");

    comment("Create unconfirmed signature, so can try confirming after finishing");
    $wth->browser_get($petition_uri);
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1501),
                email => email_n(1501),
                email2 => email_n(1501),
                address => "1501 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_contents("We have sent you an email");
    my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n(1501).'" <'.email_n(1501).'>%Please click on the link below to confirm your signature%');
    die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
    my $partial_signup_confirm = $1;
    comment("Partial signup confirm link: $partial_signup_confirm");

    comment("Go forward in time to day that deadline expires at end of, and make sure that nothing happens.");
    set_pet_date('1988-12-31');
    call_mark_finished();
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();

    comment("Get ready with the sign form, so can later try signing up after finishing");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents("signForm");

    comment("Go forward one more day, get petition to mark itself as finished");
    set_pet_date('1989-01-01');
    call_mark_finished();

    comment("Try to sign the petition, using the form we loaded before finish");
    $wth->browser_check_contents("signForm");
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1500),
                email => email_n(1500),
                email2 => email_n(1500),
                address => "1500 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_no_contents("Now check your email!"); 
    $wth->browser_check_contents("Sorry, but that petition is now closed."); 

    # Policy is currently that signing a petition after the deadline using an
    # email you got before the deadline is OK. So instead of this test, we just
    # leave the unconfirmed signature around (as that is a useful test itself)
    #comment("Try to sign the petition, using the email we prepared earlier");
    #$wth->browser_get($partial_signup_confirm);
    #$wth->browser_check_no_contents("You are now signed up to this petition."); 
 
    comment("Check that petition now appears in closed section, and has no sign form");
    $wth->browser_get($base_url);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents("None");
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents("This petition is now closed");
    $wth->browser_check_no_contents('with response');
    $wth->browser_check_no_contents('signForm');

    comment("Send a response to all the signers");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_check_no_contents('Response sent');
    $wth->browser_submit_form(form_name => 'petition_admin_go_respond',
                fields => { }, button => 'respond') or die "Failed to submit write response button";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                fields => {
                    message_body => "Thank you for your petition. 

We are going to do exactly what you say, because obviously we would never get contradictory petitions from different people.
Email us on test\@example.org.
It will cost \xa34.99.

Yours faithfully, 

the PM.",
                    }, button => 'respond') or die "Failed to submit response preview form";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                button => 'submit') or die "Failed to submit response form";
    $wth->browser_check_contents("Your response has been recorded and will be sent out shortly");
    call_send_messages();

    comment("Check everyone gets the response; non deleted signers, creator and admin");
    foreach my $signer_no (1488,1490) {
        $wth->email_get_containing('%Envelope-to: '.email_n($signer_no).'%Subject: Response%Thank you for your petition%');
    }
    $wth->email_get_containing('%To: '.email_n(99)."%Subject: Response%Thank you for your petition%");
    $wth->email_get_containing('%To: '.$contact_email.'%Subject: Response%Thank you for your petition%');

    comment("Check government response is displayed on petition page");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents('with response');
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents('Thank you for your petition');

    comment("Load the RSS feeds to check for basic errors in them");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_back();
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_contents($petition_text);

    comment("Send 2nd response, HTML style");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_submit_form(form_name => 'petition_admin_go_respond',
                fields => { }, button => 'respond') or die "Failed to submit write response button";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                fields => {
                    html_mail => 1,
                    message_body => "Thank you for your petition. 

We've changed our minds, and now we're not going to do this at all.

Yours faithfully, 

the PM.",
                message_links => 'First bullet point

Second bullet point'
                    }, button => 'respond') or die "Failed to submit response preview form";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                button => 'submit') or die "Failed to submit response form";
    $wth->browser_check_contents("Your response has been recorded and will be sent out shortly");
    call_send_messages();

    comment("Check everyone gets the 2nd response; non deleted signers, creator and admin");
    foreach my $signer_no (1488,1490) {
        $wth->email_get_containing('%Envelope-to: '.email_n($signer_no).'%Subject: Response%Thank you for your petition%<body>%');
    }
    $wth->email_get_containing('%To: '.email_n(99)."%Subject: Response%Thank you for your petition%<body>%");
    $wth->email_get_containing('%To: '.$contact_email.'%Subject: Response%Thank you for your petition%');

    comment("Check 2nd government response is displayed on petition page");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents('with response');
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents('changed our minds');

    comment("Check that can't send another response");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_submit_form(form_name => 'petition_admin_go_respond',
                fields => { }, button => 'respond') or die "Failed to submit write response button";
    $wth->browser_check_contents('already sent 2 responses');

    comment("Check to see signatures are scrubbed");
    set_pet_date('1990-12-31');
    call_remove_old(); # Should do nothing
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_check_contents(quotemeta(email_n(1490)));
    set_pet_date('1991-01-01');
    call_remove_old(); # Should remove 1501 row completely, 1488-1490 scrubbed
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_check_no_contents(quotemeta(email_n(1490)));
}

sub do_council_test {

    change_config_file("SITE_NAME', 'number10'", "SITE_NAME', 'westminster'");
    change_config_file("CONTACT_NAME', 'HM Government'", "CONTACT_NAME', 'Westminster City Council'");
    change_config_file("SITE_PETITIONED', 'the Prime Minister'", "SITE_PETITIONED', 'Westminster City Council'");

    set_pet_date('1994-03-03');

    my $petition_text = "check the people behind this site get the right emails";

    comment("Check front page works");
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Westminster");
    $wth->browser_check_contents("Petitions");

    do_create_part({
        pet_content => $petition_text,
        detail => "",
        rawdeadline => 'Apr 10th', # TODO Add test for duration >6 weeks later
        ref => 'rightemails',
        category => 521
    }, {
        name => name_n(1), organisation => "", address => "Address",
        address_type => 'home', postcode => "SW1A 1AA", telephone => "01234 56789",
        email => email_n(1), email2 => email_n(1)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(1).'" <'.email_n(1).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: Please Action%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%To: '.email_n(1).'%Subject: Your petition to Westminster City Council has been accepted%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("1 signature");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("10 April 1994");
    $wth->browser_check_contents('signForm');

    comment("Go forward in time to day that deadline expires at end of, and make sure that nothing happens.");
    set_pet_date('1994-04-10');
    call_mark_finished();
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();

    comment("Go forward one more day, get petition to mark itself as finished");
    set_pet_date('1994-04-11');
    call_mark_finished();
    call_send_messages();
    my $admin_finished_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: Petition%finished%');

    comment("Go forward a month, check follow-up email is sent");
    set_pet_date('1994-05-11');
    call_mark_finished();
    call_send_messages();
    $admin_finished_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: Petition%finished 1 month ago%');

    restore_config_file();
}

#############################################################################
# Make a petition, and reject it, resubmit, and reject again

sub do_rejection_test {
    set_pet_date('1989-03-01');

    my $petition_text = "impeach President Bush";

    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "Isn't it obvious! I have no understanding of the powers of a Prime Minister! I'm going to dumbly ask him to do something that he can't do!",
        rawdeadline => '1 week',
        ref => 'rejecttest',
        category => 521
    }, {
        name => name_n(44),
        organisation => "Crazy Pressure Group",
        address => "Removal From Office Rd.",
        postcode => "SW1A 2AB",
        telephone => "01876 543210",
        email => email_n(44),
        email2 => email_n(44)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(44).'" <'.email_n(44).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'rejecttest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'Sorry, this is something the US Congress can do, but not the Prime Minster of the UK! You might want to change your petition to ask the Prime Minister to write a public letter to the Congress leader to ask him to impeach Bush, or something like that.',
                'rejection_cats[]' => ['4096', 13], # the 13th checkbox has value 4096, and means "PM doesn't have power"
            }, button => 'reject_submit') or die "Failed to submit reject details form";

    comment("Get rejection message to creator");
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%To: '.email_n(44).'%Subject: Your petition has been rejected%Outside the remit or powers%');
    die "Rejection email link not found\n" if ($rejection_email !~ m{^\s*(https?://.*)$}m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
   
    comment("Resubmit with change in petition text");
    my $petition_text_resubmitted = "bleach President Bush";
    $wth->browser_get($rejection_email_link);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents('Choose a short name for your petition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { pet_content => $petition_text_resubmitted }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have resubmitted your petition for approval.");

    comment("Get the email to the administrator");
    call_send_messages();
    $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: Resubmitted petition to the Prime Minister%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject again");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'rejecttest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'It is just nonsense, sorry!',
                'rejection_cats[]' => ['256', 9], # the 9th checkbox has value 256, and means "Wording that is impossible to understand"
            }, button => 'reject_submit') or die "Failed to submit reject details form";
    call_send_messages();
    $rejection_email = $wth->email_get_containing('%To: '.email_n(44).'%Subject: Your petition has been rejected%impossible%understand%');
    die "Rejection email link found when it should not have been\n" if ($rejection_email =~ m{^\s*(https?://.*)$}m);

    comment("Check appears on rejection page");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_follow_link(text_regex => qr/$petition_text_resubmitted/);
    $wth->browser_check_contents("This petition has been <strong>rejected</strong>");
}

#############################################################################
# Test timeout for petitions which have been rejected once but not resubmitted

sub do_timeout_test {
    set_pet_date('1989-06-01');

    my $petition_text = "say crap on the radio";

    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "Oh flip oh gosh oh golly gee. We said the word and got our knuckles rapped.",
        rawdeadline => '1 month',
        ref => 'timeouttest',
        category => 521,
    }, {
        name => name_n(55),
        organisation => "Stiff Little Fingers",
        address => "Uncle John's house",
        postcode => "WC2H 7LA",
        telephone => "020 43658790",
        email => email_n(55),
        email2 => email_n(55)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(55).'" <'.email_n(55).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'timeouttest'");
    $wth->browser_form_name('rejection_details_form');
    $wth->browser_field('rejection_cats[]', '128', 8); # the 8th checkbox has value 128, and means "offensive language"
    $wth->browser_field('rejection_cats[]', '1024', 11); # the 11th checkbox has value 1024, and means "attempting to market a product"
    $wth->browser_field('reject_hide[content]', '2');
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'You can\'t say that on our website either. Beside, you\'re just trying to sell your song.',
#                'categories[]' => ['128', 8], 
#                'categories[]' => ['1024', 11], 
            }, button => 'reject_submit') or die "Failed to submit reject details form";
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%To: '.email_n(55).'%Subject: Your petition has been rejected%Language which is offensive%');
    die "Rejection email link not found\n" if ($rejection_email !~ m{^\s*(https?://.*)$}m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
    # Do not resubmit

    comment("Just before timeout");
    set_pet_date('1989-06-29');
    call_mark_finished();
    call_send_messages();
    comment("... make sure not rejected yet");
    $wth->email_check_none_left();
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_no_contents($petition_text);
    comment("Just after timeout");
    set_pet_date('1990-06-30'); 
    call_mark_finished();
    call_send_messages();
    $wth->email_get_containing('%To: '.email_n(55).'%%Subject: Your chance to revise your petition has expired%');

    comment("Check it is on rejection page, but text not shown (as offensive)");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_contents("Petition details cannot be shown");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/more details/);
    $wth->browser_check_contents("commercial endorsement");
    $wth->browser_check_contents("language which is offensive");
    $wth->browser_check_no_contents($petition_text);
    comment("... check not in RSS feed");
    $wth->browser_back();
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_no_contents($petition_text);
}
   
#############################################################################
# Make a petition, and reject it, resubmit, and approve

sub do_resubmit_test {
    set_pet_date('1989-09-03');

    my $petition_text = "love the world and everything in it";

    comment("Create a new petition");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/Create a petition/);
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => {
                pet_content => $petition_text,
                detail => "If everyone did this, we'd all be much happier!",
                rawdeadline => '2 years',
                ref => 'resubmittest',
                category => 521
                }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Please change your duration so it is less than 1 year");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { rawdeadline => '1 year', ref => 'resubmittest'
                }, button => 'tostepyou') or die "Failed to submit step 1";

    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => {
                name => name_n(504),
                organisation => "Optimists Etc.",
                address => "Eternity Lane",
                postcode => "EH1 2NG",
                telephone => "01234 567890",
                email => email_n(504),
                email2 => email_n(504)
                }, button => 'tosteppreview') or die "Failed to submit step 2";

    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";

    $wth->browser_check_contents("We have sent you an email to confirm");

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(504).'" <'.email_n(504).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'resubmittest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'He could do this, but not really in his capacity as Prime Minister.',
                'rejection_cats[]' => ['4096', 13], # the 13th checkbox has value 4096, and means "PM doesn't have power"
            }, button => 'reject_submit') or die "Failed to submit reject details form";

    comment("Get rejection message to creator");
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%To: '.email_n(504).'%Subject: Your petition has been rejected%Outside the remit or powers%');
    die "Rejection email link not found\n" if ($rejection_email !~ m{^\s*(https?://.*)$}m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
   
    comment("Resubmit with change in petition text and reference");
    my $petition_text_resubmitted = "change the law to make it compulsory for everyone to adore the world and everything that is in it";
    $wth->browser_get($rejection_email_link);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents('Choose a short name for your petition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { pet_content => $petition_text_resubmitted, ref => 'lovetheworld' }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have resubmitted your petition for approval.");

    comment("Get the email to the administrator");
    call_send_messages();
    $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: Resubmitted petition to the Prime Minister%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve it");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%To: '.email_n(504).'%Subject: Your petition to the Prime Minister has been approved%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_check_contents("lovetheworld");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_no_contents("resubmittest");
    $wth->browser_follow_link(text_regex => qr/$petition_text_resubmitted/);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_check_contents("lovetheworld");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_no_contents("resubmittest");
    $wth->browser_check_contents('signForm');
    $wth->browser_check_contents("<strong>Signatures:</strong>&nbsp;1");

    comment("Admin reduce length of petition, presumably after creator request");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Live/);
    $wth->browser_follow_link(text => 'admin');
    $wth->browser_submit_form(form_name => 'petition_admin_change_deadline',
                fields => { deadline => '1st January 1991' }) or die "Failed to submit too high deadline change";
    $wth->browser_check_contents('less than 1 year');
    $wth->browser_submit_form(form_name => 'petition_admin_change_deadline',
                fields => { deadline => '1st January 1989' }) or die "Failed to submit too low deadline change";
    $wth->browser_check_contents('in the future');
    $wth->browser_submit_form(form_name => 'petition_admin_change_deadline',
                fields => { deadline => '1st June 1990' }) or die "Failed to submit OK deadline change";
    $wth->browser_check_contents('Deadline updated');

    comment("Admin remove petition, after creator request");
    $wth->browser_submit_form(form_name => 'petition_admin_go_respond',
        fields => {}, button => 'remove') or die "Failed to submit remove button";
    $wth->browser_submit_form(form_name => 'petition_admin_redraft',
        fields => { reason => 'Petition creator asked us to take it down'}, button => 'submit_button') or die "Failed to submit removal request";
    $wth->browser_check_contents('petition has been removed');
    $wth->browser_get($base_url);
    $wth->browser_check_no_contents($petition_text_resubmitted);
    $wth->browser_check_no_contents("lovetheworld");
    
    comment("Close petition");
    set_pet_date('1990-06-02'); 
    call_mark_finished();
}

#############################################################################
# Make a petition, send early government response, close petition, send late
# response

sub do_early_response_test {
    set_pet_date('1995-01-01');

    my $petition_text = "respond to this petition before it closes";

    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "I want to get one response before it closes, and another after it closes!",
        rawdeadline => '6 months',
        ref => 'respond-early',
        category => 521
    }, {
        name => name_n(511),
        address => "The Grid\nLondon",
        postcode => "SW1A 2AA",
        telephone => "01234 56789",
        email => email_n(511),
        email2 => email_n(511)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(511).'" <'.email_n(511).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%To: '.email_n(511).'%Subject: Your petition to the Prime Minister has been approved%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("1 signature");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("01 July 1995");
    $wth->browser_check_contents('signForm');

    comment("Loop through several signers");
    my $c = 1;
    my $petition_uri = $wth->browser_uri();
    foreach my $signer_no (512..514) {
        comment("Sign the petition, $signer_no");
        $wth->browser_submit_form(form_name => 'signForm',
                fields => {
                    name => name_n($signer_no),
                    email => email_n($signer_no),
                    email2 => email_n($signer_no),
                    address => "$signer_no Signature Street\n\nSealville",
                    postcode => "EH99 1SP",
                    }, button => 'submit') or die "Failed to submit sign petition";
        $wth->browser_check_contents("We have sent you an email");

        comment("Find confirmation email");
        my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n($signer_no).'" <'.email_n($signer_no).'>%Please click on the link below to confirm your signature%');
        die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
        my $confirm_signature_link = $1;
        comment("Confirm signature by user clicking link");
        comment("Confirmation link: $confirm_signature_link");
        $wth->browser_get($confirm_signature_link);
        $wth->browser_check_contents("You are now signed up to this petition.");

        comment("Check it says it is signed on the front page");
        call_update_totals();
        $wth->browser_get($base_url);
        $wth->browser_check_contents($petition_text);
        $c++;
        $wth->browser_check_contents("$c signatures");
        $wth->browser_get($petition_uri);
    }

    comment("Create unconfirmed signature, so can try confirming after early response");
    $wth->browser_get($petition_uri);
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(515),
                email => email_n(515),
                email2 => email_n(515),
                address => "515 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_contents("We have sent you an email");
    my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n(515).'" <'.email_n(515).'>%Please click on the link below to confirm your signature%');
    die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
    my $partial_signup_confirm = $1;
    comment("Partial signup confirm link: $partial_signup_confirm");

    comment("Go forward in time to day that first response is sent");
    set_pet_date('1995-03-22');
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();

    comment("Send a response to all the signers");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and signers/);
    $wth->browser_follow_link(text_regex => qr/Live/);
    $wth->browser_check_no_contents('Response sent');
    $wth->browser_submit_form(form_name => 'petition_admin_go_respond',
                fields => { }, button => 'respond') or die "Failed to submit write response button";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                fields => {
                    message_body => "Thank you for your petition. Here is my early response as requested. It includes the name of Dvo\xc5\x99\xc3\xa1k.",
                }, button => 'respond') or die "Failed to submit response preview form";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                button => 'submit') or die "Failed to submit response form";
    $wth->browser_check_contents("Your response has been recorded and will be sent out shortly");
    call_send_messages();

    comment("Check everyone gets the response; signers, creator and admin");
    foreach my $signer_no (512..514) {
        $wth->email_get_containing('%Envelope-to: '.email_n($signer_no).'%Subject: Response%Thank you for your petition%');
    }
    # Encoded in UTf-8.
    $wth->email_get_containing('%To: '.email_n(511)."%Subject: Response%Thank you for your petition%");
    $wth->email_get_containing('%To: '.$contact_email.'%Subject: Response%Thank you for your petition%');
    $wth->email_check_none_left();

    $wth->browser_get($partial_signup_confirm);
    $wth->browser_check_contents("You are now signed up to this petition."); 
    $c++;
    comment("Check person who signed up before pre-reply was written gets the email");
    call_send_messages();
    $wth->email_get_containing('%Envelope-to: '.email_n(515).'%Subject: Response%Thank you for your petition%');
    $wth->email_check_none_left();

    comment("Check early response is now on the webpage");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_check_contents('with response');
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents('Thank you for your petition');

    comment("Loop through several more signers");
    set_pet_date('1995-05-10');
    $wth->browser_get($petition_uri);
    foreach my $signer_no (516..518) {
        comment("Sign the petition, $signer_no");
        $wth->browser_submit_form(form_name => 'signForm',
                fields => {
                    name => name_n($signer_no),
                    email => email_n($signer_no),
                    email2 => email_n($signer_no),
                    address => "$signer_no Signature Street\n\nSealville",
                    postcode => "EH99 1SP",
                    }, button => 'submit') or die "Failed to submit sign petition";
        $wth->browser_check_contents("We have sent you an email");

        comment("Find confirmation email");
        my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n($signer_no).'" <'.email_n($signer_no).'>%Please click on the link below to confirm your signature%');
        die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
        my $confirm_signature_link = $1;
        comment("Confirm signature by user clicking link");
        comment("Confirmation link: $confirm_signature_link");
        $wth->browser_get($confirm_signature_link);
        $wth->browser_check_contents("You are now signed up to this petition.");

        comment("Check it says it is signed on the front page");
        call_update_totals();
        $wth->browser_get($base_url);
        $wth->browser_check_contents($petition_text);
        $c++;
        $wth->browser_check_contents("$c signatures");
        $wth->browser_get($petition_uri);
    }
    comment("Check none of these signers get the early response by email");
    call_send_messages();
    $wth->email_check_none_left();

    comment("Go forward to after petition has closed, get petition to mark itself as finished");
    set_pet_date('1995-07-02');
    call_mark_finished();

    comment("Check that petition now appears in closed section, and has no sign form");
    $wth->browser_get($base_url);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents("None");
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents("This petition is now closed");
    $wth->browser_check_no_contents('signForm');
}

# Just here for now, first run
my $safe_config;
sub change_config_file {
    my ($search, $replace) = @_;

    open(FP, '../conf/general') or die $!;
    my $f = join('', <FP>);
    close FP;
    $safe_config = $f unless $safe_config;

    $f =~ s/$search/$replace/;
    open(FP, '>../conf/general') or die $!;
    print FP $f;
    close FP;
}

END {
    restore_config_file();
}

sub restore_config_file {
    return unless $safe_config;
    open(FP, '>../conf/general') or die $!;
    print FP $safe_config;
    close FP;
}

sub do_disabled_test {
    set_pet_date('1996-01-01');

    comment("Create a petition");
    my $petition_text = "test petition disabling";
    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "This petition should slip under the wire.",
        rawdeadline => 'June 30th',
        ref => 'disabling',
        category => 521
    }, {
        name => name_n(99),
        address => "The Beseechment Building\nImportuning Island",
        postcode => "SW1A 2AA",
        telephone => "01234 56789",
        email => email_n(99),
        email2 => email_n(99)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(99).'" <'.email_n(99).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Approve petition");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%To: '.$contact_email.'%Subject: New petition submitted%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m{^\s*(http://.*$)}m);
    my $admin_approve_link = $1;
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and signers");
    $wth->browser_check_contents($petition_text);
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%To: '.email_n(99).'%Subject: Your petition to the Prime Minister has been approved%');
    $wth->browser_check_contents('Petition approved!');

    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents('signForm');
    my $petition_uri = $wth->browser_uri();

    comment("Sign petition once, but don't yet confirm");
    my $c = 1;
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1201),
                email => email_n(1201),
                email2 => email_n(1201),
                address => "1201 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_contents("We have sent you an email");

    my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n(1201).'" <'.email_n(1201).'>%Please click on the link below to confirm your signature%');
    die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m{^\s*(https?://.*)$}m);
    my $confirm_signature_link = $1;
    $wth->browser_get($confirm_signature_link);
    $wth->browser_check_contents("You are now signed up to this petition.");
    $wth->browser_get($petition_uri);

    comment("Disable petition signing");
    change_config_file("SIGNING_DISABLED', 0", "SIGNING_DISABLED', 'Petition signing is currently disabled.'");
    mySociety::SystemMisc::kill_named_processes(SIGKILL, $named_fcgi_processes);

    comment("Try to sign the petition, using the form we loaded before disabling");
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1500),
                email => email_n(1500),
                email2 => email_n(1500),
                address => "1500 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_no_contents("Now check your email!"); 
    $wth->browser_check_contents("Petition signing is currently disabled."); 

    comment("Check the signing form has now gone too.");
    $wth->browser_get($petition_uri);
    $wth->browser_check_no_contents('signForm');
    $wth->browser_check_contents("Petition signing is currently disabled."); 

    comment("Disable petition creation");
    change_config_file("CREATION_DISABLED', 0", "CREATION_DISABLED', 'Petition creation is currently closed.'");
    mySociety::SystemMisc::kill_named_processes(SIGKILL, $named_fcgi_processes);

    comment("Try and create a new petition");
    $wth->browser_get($base_url);
    $wth->browser_check_no_contents('Create a petition');
    $wth->browser_get($base_url . '/new'); # XXX It's not linked anywhere!
    $wth->browser_check_contents("Petition creation is currently closed.");

    restore_config_file();
}

