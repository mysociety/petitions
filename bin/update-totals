#!/usr/bin/perl -w -I../commonlib/perllib -I../perllib

# Oh god, this is awful. As someone else said quite frequently. :)
# 
# So updating cached_signers at the same time you confirm a
# signature is so slow as to collapse the whole site when it's
# busy, as we discovered today. So let's update cached_signers
# separately on cron. But you can't just do it in one update
# as the signer table somehow gets locked and given the number
# of writes going on there, that's just not allowed.
#
# Even just fetching the ids first and then updating with current
# live values does that sometimes. So let's just fetch some values
# and use them, even if by then they'll be out of date. It's not
# as if it's for anything important.
# 
# This currently takes around 2 minutes for the first query.
# And occasionally deadlocks, sigh.

# Parameters:
# all - as first parameter, does every petition.
# NUMBER - as first parameter, do petitions changed in last NUMBER minutes.
# Default behaviour is to do only petitions changed in last 35 minutes.

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";
chdir $FindBin::Bin;

use strict;
use v5.14;
use Getopt::Long;
use POSIX qw(strftime);
use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh select_all);
use mySociety::Memcached;
mySociety::Memcached::set_config(mySociety::Config::get('MEMCACHE_HOST'), mySociety::Config::get('PET_DB_NAME'));
use Petitions;

my $verbose = 0;
if (!GetOptions('verbose' => \$verbose)) {
    exit(1);
}

if (!$ARGV[0]) {
    die "Please specify a first parameter; 'all' to update all petitions, or a number of minutes to do only those changed that recently"
}

say "Starting to fetch 'correct' totals at " . localtime() if $verbose;

my $date_part;
if ($ARGV[0] eq "all") {
    $date_part = "";
} elsif ($ARGV[0] =~ /^[0-9]+$/) {
    # If you calculate the date, postgres will use the signtime index
    # If you use current_timestamp, it seq. scans the entire table, genius
    my @time = localtime();
    $time[1] -= $ARGV[0];
    my $date = strftime("%Y-%m-%d %H:%M:%S", @time);
    $date_part = " and id in (select distinct(petition_id) from signer where signtime > '$date') ";
} else {
    die "First parameter must be either 'all' to update all petitions, or a number of minutes to do only those changed that recently"
}
my $r = select_all("select id, ref, cached_signers,
    (select count(*)+1 from signer 
        where petition_id=petition.id and emailsent='confirmed' and showname='t') as count
    from petition
    where cached_signers !=
        (select count(*)+1 from signer
            where petition_id=petition.id and emailsent='confirmed' and showname='t')
        $date_part
    ");

say "Starting to update " . (@$r/2) . " cached totals at " . localtime() if $verbose;

foreach (@$r) {
    say "Updating $_->{ref} from $_->{cached_signers} to $_->{count}" if $verbose;
    dbh()->do("update petition set cached_signers=?, lastupdate=ms_current_timestamp()
        where id=? and cached_signers!=?",
        {}, $_->{count}, $_->{id}, $_->{count});
    dbh()->commit();
    mySociety::Memcached::set("lastupdate:$_->{id}", time());
}

say "Finished at " . localtime() if $verbose;

